package com.locusenergy.meters {		import flash.display.*;	import caurina.transitions.Tweener;	import flash.text.TextField;	import flash.text.TextFormat;	import flash.text.TextFieldAutoSize;	import flash.text.TextFormatAlign;	import com.locusenergy.ShadowBox;	import com.locusenergy.CrankCommas;		public class MeterOutput extends Sprite{				// Constants:		// Public Properties:		// Private Properties:		private var textField:TextField;		private var title:TextField;		private var counter:Number;		public var finalReading:Number;		public var reading:Number;		private var reps:Number;		private var time:Number;		private var delta:Number;		private var unit;		private var style:String;		private var boxFlag:Boolean;		private var boxWidth;		private var shadowBox:ShadowBox;		private var line;		private var accuracy;		// Initialization:		public function MeterOutput(title:String = "", unit = "", box:Boolean = true, accuracy = 2) 		{			this.unit = " "+unit;			boxWidth = 220;			finalReading = 0;			boxFlag = box;			this.accuracy = accuracy;			initializeText(title);					}		public function updateWidth(num)		{			boxWidth = num;			shadowBox.width = num;			this.title.x = boxWidth/2 - this.title.width/2;			textField.x =  boxWidth/2 - textField.width/2;			removeChild(line);			drawHorizontalRule();		}				public function updateMeter(reading, rot:Number = 30, time:Number = 1)		{			delta = reading - finalReading;			this.reading = reading			//use the rotation as the number of reps			reps = rot>0?rot:rot+360;	//accounts for -degree rot						this.time = time;			textUpdate();					}		private function initializeText(title:String)		{			drawHorizontalRule();						textField = new TextField();			this.title = new TextField();			var xPos = 0;						var fmt:TextFormat = new TextFormat("Gotham Narrow Book",22.35,0xFFC900);			var titleFmt:TextFormat = new TextFormat("Gotham Narrow Light",10.52,0xFFFFFF);			titleFmt.align = TextFormatAlign.CENTER;			textField.defaultTextFormat = fmt;			this.title.defaultTextFormat = titleFmt;			counter = 0.0;						this.title.text = title.toUpperCase();			this.title.wordWrap = true;			this.title.embedFonts = true;			this.title.autoSize = TextFieldAutoSize.CENTER;			this.title.antiAliasType = flash.text.AntiAliasType.ADVANCED;				this.title.selectable = false;			this.title.width = 180;			this.title.x = boxWidth/2 - this.title.width/2;			this.title.y = line.y - this.title.height - 3;						textField.x =  boxWidth/2 - textField.width/2;			textField.y = this.line.y + 4;			textField.embedFonts = true;			textField.antiAliasType = flash.text.AntiAliasType.ADVANCED			textField.autoSize = TextFieldAutoSize.CENTER;			textField.selectable = false;			if (unit == " $")				textField.text = unit + counter.toFixed(accuracy);			else					textField.text =  counter.toFixed(accuracy) + unit;						if (boxFlag)			{				shadowBox = new ShadowBox(boxWidth, 65);				addChild(shadowBox);				shadowBox.y = 0;				shadowBox.x = 0;			}			addChild(textField);			addChild(this.title);					}				public function updateTitle(newTitle)		{			this.title.text = newTitle.toUpperCase();		}				private function drawHorizontalRule()		{			line = new Sprite();			var lineLength = 60;			var xPos = boxWidth/2 - lineLength/2;			line.graphics.lineStyle(1,0xffffff,0.3);			line.graphics.moveTo(xPos, 0);			line.graphics.lineTo(xPos + lineLength, 0);			line.y = 30;			addChild(line);		}				protected function textUpdate()		{			Tweener.addCaller(textField, {onUpdate:this.getUpdate, time:time, count:reps, transition:"linear"});		}				protected function getUpdate()		{			var increment;			increment = Math.abs(delta/reps);			if (delta > 0)				counter += increment;			else if (delta < 0)				counter -= increment;						if ((counter > reading && delta > 0) || (counter < reading && delta < 0))			{				counter = reading;							}						finalReading = counter;						var counterTxt = CrankCommas.crankComma(counter.toFixed(accuracy));			if (unit == " $")				textField.text = unit + counterTxt;			else					textField.text = counterTxt + unit;						textField.x =  boxWidth/2 - textField.width/2;					}		public function cleanUp()		{			Tweener.removeAllTweens();		}	}}