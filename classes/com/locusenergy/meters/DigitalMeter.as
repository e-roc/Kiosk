package com.locusenergy.meters {	import flash.display.*;	import flash.text.*;	import com.locusenergy.AssetCache;	import caurina.transitions.Tweener;	import flash.events.EventDispatcher;	import flash.events.Event;	public class DigitalMeter extends Meter{		// Constants:		// Public Properties:		var meterCounter;		//var meter_mc:DigitalMeter;		var meterText:TextField;		protected var reps;		protected var delta;		// Private Properties:			// Initialization:		public function DigitalMeter(reading:Number = 0.0) 		{ 			meterCounter = 0.00;			this.reading = Number(reading.toFixed(2));			this.meter = new DigitalMeter_mc;		}		override protected function initialize()		{			time = 2;			reps = 100;			readingLast = 0;			delta = reading - readingLast;						meterText = (meter.getChildByName("digital_mc") as Sprite).getChildByName("meter_text") as TextField;			meterText.embedFonts = true;			meterText.antiAliasType = AntiAliasType.ADVANCED;			startMeter();			//dispatchEvent(new Event("MeterLoaded"));			//trace ("TRIGGER DIGITAL METER OMITTED");		}		public function initializeExternal()		{			time = 2;			reps = 100;			readingLast = 0;			delta = reading - readingLast;						meterText = (meter.getChildByName("digital_mc") as Sprite).getChildByName("meter_text") as TextField;			meterText.embedFonts = true;			meterText.antiAliasType = AntiAliasType.ADVANCED;			addChild(this.meter);			startMeter();			//dispatchEvent(new Event("MeterLoaded"));			//trace ("TRIGGER DIGITAL METER OMITTED");		}		// Public Methods:		// Protected Methods:				public function textDisplay()		{			trace("METERTEXT", meterText);			meterText.text =  meterCounter.toFixed(2);			delta = reading - meterCounter;			Tweener.addCaller(meterText.text, {onUpdate:this.textUpdate, onComplete:this.fadeIn, time:time, count:reps, transition:"linear"});		}		override protected function textUpdate()		{			if (delta != 0)				meterCounter += delta/100;					if ((meterCounter >= reading && delta > 0)  || (meterCounter <= reading && delta < 0))			{				meterCounter = reading;			}				meterText.alpha = .7;			meterText.text = meterCounter.toFixed(2);		}		public function fadeIn()		{			Tweener.addTween(meterText,{alpha:1,time:.2});		}		override public function startMeter()		{			textDisplay();					}		override public function setMeterReading(reading)		{			if(reading != null)			{				this.reading = reading.toFixed(2);				startMeter();			}			else				trace(reading + " meter reading.");		}	}	}