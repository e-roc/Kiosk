package com.locusenergy.meters {		import caurina.transitions.Tweener;	import flash.display.Sprite;	import flash.text.*;	import flash.events.EventDispatcher;	import flash.events.Event;		public class NetMeter extends Meter{				public static const MAX_ROTATION_DEGREE = 106;		// Public Properties:		public var rot;		public var delta;		public var needle_mc:Sprite;		public var firstRun:Boolean = true;		private var max_text:TextField;		private var min_text:TextField;		private var min;		// Initialization:		public function NetMeter(reading:Number = 0.00, max:Number = 100.0, min:Number = -100.0) { 			readingLast = 0.00;			this.reading = reading;			this.max = max;			max_text = new TextField;			min_text = new TextField;		}		public function startLoadMeter()		{			this.meter = new NetMeter_mc();			initialize();			addChild(this.meter);			dispatchEvent(new Event("MeterLoaded"));		}		public function setMax(max)		{			this.max = max;			max_text.htmlText = "" + max + "";		}		public function setMin(min)		{			this.min = min;			min_text.htmlText = "" + min + "";		}		override protected function initialize()		{			readingLast = 0;			firstRun = true;			needle_mc = meter.getChildByName("needleNet_mc") as Sprite;			max_text = meter.getChildByName("max_text") as TextField;			max_text.embedFonts = true;			max_text.antiAliasType = AntiAliasType.ADVANCED;			max_text.htmlText = "" + max + "";			min_text = meter.getChildByName("min_text") as TextField;			min_text.embedFonts = true;			min_text.antiAliasType = AntiAliasType.ADVANCED;			min_text.htmlText = "" + min + "";			needle_mc.rotation = 0;		}		override protected function animateMeter(readingVal, maxVal)		{			trace("ANIMATING NET METER");			if (reading >= this.min && reading <= this.max)			{				delta = reading - readingLast;				readingLast = reading;				rot = (readingVal/maxVal) * MAX_ROTATION_DEGREE;				time = Math.abs(delta/maxVal) * MAX_TIME;				if (!firstRun) 				{					time = time*3;					firstRun = false;				}			}			else if (reading > this.max)			{				rot =  MAX_ROTATION_DEGREE;			}			else			{				rot = -MAX_ROTATION_DEGREE;			}			readingLast = readingVal;			Tweener.addTween(needle_mc, {rotation: rot, time:time,transition:"easeInOutQuad" });					}		override public function setMeterReading(reading)		{			this.reading = reading;			if (this.reading > max)	{				this.reading = max; 				animateMeter(max,max)}			else if (this.reading < min)	{				this.reading = min;				animateMeter(min,max)}			else animateMeter(this.reading, max);		}		// Protected Methods:	}	}