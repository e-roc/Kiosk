package com.locusenergy.meters {	import flash.display.*;	import caurina.transitions.Tweener;	import com.locusenergy.AssetCache;	import flash.text.*;	import flash.net.URLRequest;	import flash.events.*;		public class Meter extends Sprite{				// Constants:		public static const MAX_TIME = 3;		// Public Properties:		public function Meter() { }		public var time:Number;		// Private Properties:				protected var meter:Sprite;		protected var mLoader:Loader;		protected var max:Number;		protected var reading:Number;		protected var readingLast:Number;				public var meterOutput:MeterOutput;		protected var counter;		protected var delay;		// Initialization:		// Public Methods:		/////////////////////////////////////////////////////////////////////////////////////////////////////////		public function loadMeter(url:String)		{			mLoader = new Loader();			var mRequest:URLRequest = new URLRequest(url);			mLoader.contentLoaderInfo.addEventListener(Event.COMPLETE, onCompleteHandler);			mLoader.contentLoaderInfo.addEventListener(ProgressEvent.PROGRESS, onProgressHandler);			mLoader.load(mRequest);		}		public static function loadCachedMeter(url:String, type:String)		{			var mLoader = new Loader();			var mRequest:URLRequest = new URLRequest(url);			if (type == "analog")				mLoader.contentLoaderInfo.addEventListener(Event.COMPLETE, onCompleteAnalog, false, 0, true);			else if (type == "digital")				mLoader.contentLoaderInfo.addEventListener(Event.COMPLETE, onCompleteDigital, false, 0, true);			//mLoader.contentLoaderInfo.addEventListener(ProgressEvent.PROGRESS, onProgressHandler);			mLoader.load(mRequest);		}		public function onCompleteHandler(loadEvent:Event)		{					meter = Sprite(loadEvent.currentTarget.content);			this.addChild(meter);			initialize();			dispatchEvent(new Event("MeterLoaded"));		}				public static function onCompleteDigital(loadEvent:Event)		{					//AssetCache.digitalMeter = Sprite(loadEvent.currentTarget.content);		}		public static function onCompleteAnalog(loadEvent:Event)		{					//AssetCache.analogMeter = Sprite(loadEvent.currentTarget.content);		}				public function onProgressHandler(mProgress:ProgressEvent)		{				var percent:Number = mProgress.bytesLoaded/mProgress.bytesTotal;		}		public function setMeterReading(reading)		{}		public function cleanUp()		{			trace ("Cleaning Up Meter");			Tweener.removeAllTweens();			removeAdditionalEventHandlers();			while(this.numChildren)			{				this.removeChildAt(0);			}					}		public function startMeter(){}		/////////////////////////////////////////////////////////////////////////////////////////////////////////				// Protected Methods:		protected function getMeterMax():Number		{			//overload this function for different types of meters			//connect to server for this			return 100;		}		protected function initialize(){}		protected function animateMeter(r,m){}		protected function textUpdate(){}		protected function getUpdate(){}		protected function removeAdditionalEventHandlers(){}	}	}