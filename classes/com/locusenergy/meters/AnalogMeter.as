package com.locusenergy.meters {	import caurina.transitions.Tweener;	import flash.display.Sprite;	import flash.text.*;	import flash.events.EventDispatcher;	import flash.events.Event;	import com.locusenergy.AssetCache;	public class AnalogMeter extends Meter{				// Constants:		public static const MAX_ROTATION_DEGREE = 260;		// Public Properties:		public var rot;		public var delta;		public var needle_mc:Sprite;		public var firstRun:Boolean = true;		private var max_text:TextField;		// Private Properties:			// Initialization:		public function AnalogMeter(reading:Number = 0.00, max:Number = 100.0) { 			readingLast = 0.00;			this.reading = reading;			this.max = max;			this.meter = new Meter_mc();//AssetCache.analogMeter;			//this.meter_mc= "uniqueName" + Math.random() * 100 +"_mc";			//trace("METER NAME", meter.name);			//loadMeter("../bin/analogMeter.swf");		}		public function setMax(max)		{			this.max = max;			if (max_text != null)				max_text.htmlText = "" + max + "";		}		override protected function initialize()		{			readingLast = 0;			firstRun = true;			//max = getMeterMax();			//reading = getMeterReading();			needle_mc = meter.getChildByName("needle_mc") as Sprite;			max_text = meter.getChildByName("max_text") as TextField;			max_text.embedFonts = true;			max_text.antiAliasType = AntiAliasType.ADVANCED;			max_text.htmlText = "" + max + "";			needle_mc.rotation = 0;			startMeter();			//dispatchEvent(new Event("MeterLoaded"));		}		public function initializeExternal()		{			readingLast = 0;			firstRun = true;			//max = getMeterMax();			//reading = getMeterReading();			needle_mc = meter.getChildByName("needle_mc") as Sprite;			max_text = meter.getChildByName("max_text") as TextField;			max_text.embedFonts = true;			max_text.antiAliasType = AntiAliasType.ADVANCED;			max_text.htmlText = "" + max + "";			needle_mc.rotation = 0;			startMeter();			addChild(meter);		}		override protected function animateMeter(readingVal, maxVal)		{			if (reading > 0 && reading <= maxVal)			{				delta = reading - readingLast;				readingLast = reading;				rot = (readingVal/maxVal) * MAX_ROTATION_DEGREE;				if (needle_mc.rotation < 0)	rot = rot - 360;				time = Math.abs(delta/maxVal) * MAX_TIME;				if (!firstRun) 				{					time = time*3;					firstRun = false;				}			}			else			{				rot = 0;			}			Tweener.addTween(needle_mc, {rotation: rot, time:time,transition:"easeInOutQuad" });					}		override public function setMeterReading(reading)		{			this.reading = reading;			if (this.reading >= max)	{animateMeter(max,max)}			else if (this.reading <= 0)	{animateMeter(0,max)}			else animateMeter(this.reading, max);		}		// Protected Methods:	}	}