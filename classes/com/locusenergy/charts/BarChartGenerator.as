package com.locusenergy.charts {	import flash.display.Sprite;	import flash.events.MouseEvent;		public class BarChartGenerator extends ChartGenerator{				// Constants:		// Public Properties:				//public var barArray:Array;		//public var bars:Sprite;		// Private Properties: 		// Initialization:		public function BarChartGenerator(cWidth, cHeight, titleX, titleY, maxX, maxY, vertTicks, type, total, totalStr = "generation", msg:String ="") {			this.total = total;			this.msg = msg;			setGrid(cWidth, cHeight, titleX, titleY, maxX, maxY, vertTicks, type, 0, totalStr);			drawGrid();					}			override public function generateBars()		{			//var spacing = 3;			bars = new Sprite();			barArray = new Array();			if (this.type == "hours")			{				var pt = new Pt(0, 0);				ptsArray.unshift(pt);			}			for (var i=0; i<ptsArray.length; i++)			{				if (i < xMax)				{					//Fix for bars exceeding grid height					if (ptsArray[i].yVal > yMax)					{						//trace ("Y-VAL:" , ptsArray[i].yVal, "Y-MAX:", yMax );						ptsArray[i].yVal = yMax;					}										var barHeight = ptsArray[i].yVal * heightRatio;					var barWidth:Number = widthRatio;									var bar:Bar = new Bar(barHeight, h, barWidth, i);					bar.xVal = ptsArray[i].xVal;										bar.yVal = ptsArray[i].yVal;					bar.x = i*(barWidth);					bar.addEventListener(MouseEvent.CLICK, displayInfo);					barArray.push(bar);					bars.addChild(bar);					if (ptsArray[i].yVal == 0)					{						//make invisible, but still need placeholder						bar.alpha = 0;					}									}			}			bars.y = h + height * 0.018; //depth			bars.x = widthRatio * 0.45;  //depth?			addChild(bars);		}		override public function deselectAll()		{			for (var i=0; i<barArray.length; i++)			{				//trace("i "+i);				Bar(bars.getChildAt(i)).deselect();			}		}		override protected function removeLinkEventListeners()		{			for (var i=0; i<barArray.length; i++)			{				Bar(bars.getChildAt(i)).removeEventListener(MouseEvent.CLICK, displayInfo);			}		}												 		// Public Methods:		// Protected Methods:	}	}