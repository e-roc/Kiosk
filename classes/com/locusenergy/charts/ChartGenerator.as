package com.locusenergy.charts {		import flash.display.*;	import flash.geom.Matrix;	import flash.events.MouseEvent;	import flash.text.*;	import flash.utils.Timer;	import flash.events.TimerEvent;	import caurina.transitions.Tweener;	import com.locusenergy.CrankCommas;	import com.locusenergy.ShadowBox;	import com.locusenergy.AssetCache;		public class ChartGenerator extends Sprite{				// Constants:		// Public Properties:		public var w:Number;		public var h:Number;		public var horizTickInterval:Number;		public var vertTickInterval:Number;		public var grid:Grid;		public var barArray:Array;		public var ptsArray:Array;		public var bars:Sprite;		public var labelConversion:Conversion = new Conversion();		public var infoBubble:Sprite;		public var xMax;		public var yMax;		public var yMin;		public var yMin2;		public var xTitle;		public var yTitle;		public var yTitle2;				public var startX;		public var type;		public var offset;		public var infoTimer:Timer;		public var total:Number;		public var shadowBox:ShadowBox;		// Protected Properties:		protected var heightRatio;		protected var vertTicks;		protected var color1;		protected var color2;		protected var widthRatio;		protected var spacing;		protected var heightRatio2;		protected var maxY2=10;		protected var secondYAxisFlag:Boolean = true;		public var totalText:TextField;		protected var textFormat:TextFormat;		protected var msg;		private var totalStr;							// Initialization:		public function ChartGenerator()		{			infoTimer = new Timer(5000);			infoTimer.addEventListener(TimerEvent.TIMER, infoDestruct, false, 0, true);			totalText = new TextField();			totalText.embedFonts = true;			textFormat  = new TextFormat("Gotham Narrow Book", 18, 0xFFFFFF);			totalText.defaultTextFormat = textFormat;						if (AssetCache.hideDayView)			{				labelConversion.yesterday();			}		}		public function setGrid(cWidth, cHeight, titleX, titleY, maxX, maxY, vertTicks, type, minY:Number=0, totalStr= false) 		{ 			w = cWidth;			h = cHeight;			xMax= maxX;			yMax= maxY;			yMin = minY;			yMin2 = 0;			horizTickInterval = 2;			this.vertTicks = vertTicks;						xTitle = titleX;			yTitle = titleY;			this.type = type;			this.totalStr = totalStr;			setType(type);			setMultiples();			this.total = total;			grid = new Grid();						//addMeterOutput()			if (msg != null && msg != "")			{				shadowBox = new ShadowBox(w, 70, this.msg);				shadowBox.y = -70;				addChild(shadowBox);			}		}		public function resize(cWidth, cHeight)		{			grid.gridWidth = cWidth;			grid.gridHeight = cHeight;			w = cWidth;			h = cHeight;		}		public function drawGridForLine(cWidth, cHeight, titleX, titleY, titleY2, maxX, maxY, maxY2, vertTicks, type, color1, color2, minY:Number=0, totalStr = false)		{			setGrid(cWidth, cHeight, titleX, titleY, maxX, maxY, vertTicks, type, minY, totalStr);			grid.drawGridForLine(w, h, xMax, yMax, maxY2, horizTickInterval, vertTickInterval, xTitle.toUpperCase(), yTitle.toUpperCase(), titleY2.toUpperCase(), type, color1, color2, minY);			addChild(grid);			yTitle2 = titleY2;			this.color1 = color1;			this.color2 = color2;						setRatios();		}		public function drawGrid()		{			grid.setGrid(w, h, xMax, yMax, horizTickInterval, vertTickInterval, xTitle.toUpperCase(), yTitle.toUpperCase(), type);			grid.drawGrid();			addChild(grid);			setRatios();		}		public function setType(type)		{						var connectStr = totalStr;						if (type == "hours" || type == "weekdays" || type == "months" || type == "year" || type == "days" || type == "life-months" || type == "life-years")			{				if (type == "hours")				{					xMax = 26;					totalText.text = "Total " + connectStr + " for today: " + CrankCommas.crankComma(total.toFixed(2)) + " kWh";				}				else if (type == "weekdays")				{					horizTickInterval = 1;					xMax = 7;					totalText.text = "Total " + connectStr + " for the last 7 days: " + CrankCommas.crankComma(total.toFixed(2)) + " kWh";				}				else if (type == "months")				{					horizTickInterval = 1;					xMax = 12;					totalText.text = "Total " + connectStr + " for this year: " + CrankCommas.crankComma(total.toFixed(2)) + " kWh";				}				else if (type == "days")				{					horizTickInterval = 2;					xMax = 30;					totalText.text = "Total " + connectStr + " for the last 30 days: " + CrankCommas.crankComma(total.toFixed(2)) + " kWh";				}				else if (type == "year")				{					horizTickInterval = 1;					startX = 2000;				}				else if (type == "life-months")				{					horizTickInterval = 1;					totalText.text = "Total " + connectStr + " for this installation: " + CrankCommas.crankComma(total.toFixed(2)) + " kWh";				}				else if (type == "life-years")				{					horizTickInterval = 1;					totalText.text = "Total " + connectStr + " for this installation: " + CrankCommas.crankComma(total.toFixed(2)) + " kWh";				}			}			if (totalStr == "")	totalText.text = "";						showTotal();		}		private function showTotal()		{			totalText.autoSize = "right";			//Set Totals			totalText.x = w + 200 - totalText.width;			totalText.y = h + 70;			addChild(totalText);		}		public function setMultiples()		{			vertTickInterval = (yMax - yMin)/(this.vertTicks);		}		public function setRatios()		{			heightRatio = h/(yMax - yMin);			heightRatio2 = h / (maxY2 - yMin2);			widthRatio = (w/(Math.ceil(xMax/horizTickInterval) +1))/horizTickInterval;		}		public function setPts(array:Array)		{			ptsArray = array;		}		public function deselectAll()		{}		public function setInfoText(obj):String		{			var xAxis = obj.xVal;			var connectString = " at ";			var endString = "";			var units; 			//trace("XVAl:",xAxis);						if(type == "hours")			{				connectString = " at ";				var meridian = ":00AM";								if (xAxis >= 12 && xAxis < 24)				{					meridian = ":00PM"				}				if (xAxis%12 != 0)				{					xAxis = xAxis%12;				}				else					xAxis = 12;				endString = meridian;			}			if(type == "days")			{				var days:Array = labelConversion.getDaysOfMonthArray();				xAxis = xAxis + 1;								days = labelConversion.getDaysOfMonthArray();				xAxis = days[xAxis].longName;								connectString = " on the ";			}			else if (type == "weekdays")			{				var weekdays:Array = labelConversion.getWeekdaysArray();				connectString = " on ";				xAxis = weekdays[xAxis].longName;			}			else if (type == "months")			{				var months:Array = labelConversion.getMonthsArray();				connectString = " in "				xAxis = months[xAxis].longName;			}			else if (type == "life-months")			{				var lifeMonths:Array = labelConversion.getLifeMonthsArray(xMax);				connectString = " in "				xAxis = lifeMonths[xAxis].longName;			}			else if (type == "life-years")			{				var lifeYears:Array = labelConversion.getLifeYearsArray(xMax);				connectString = " in "				xAxis = lifeYears[xAxis].longName;			}			if (obj is Pt)			{				if(obj.bubbleColor == 0)					units = yTitle;				else if (yTitle2 != null && yTitle2 != "" && obj.bubbleColor == 1)					units = yTitle2;				else					units = yTitle;			}			else				units = yTitle;						var yOutput = CrankCommas.crankComma((obj.yVal as Number).toFixed(2))			return (yOutput + ' ' + units +  connectString + xAxis + endString);		}		public function displayInfo(me:MouseEvent)		{			infoTimer.reset();			deselectAll();			me.currentTarget.highlightSelected();			var currInfoBubble:InfoBubble = infoBubble as InfoBubble;			if (currInfoBubble != null) 			{				currInfoBubble.animateOut(cleanUpOldInfo, currInfoBubble);			}			if (me.currentTarget is Bar)			{				infoBubble = new InfoBubble(h, yMax, setInfoText(me.currentTarget), 0);				infoBubble.x = me.currentTarget.x + grid.x + 95;				infoBubble.y = h - me.currentTarget.barHeight + grid.y - 20;			}			else if (me.currentTarget is Pt)			{				var ratio;				if (me.currentTarget.type == 1 && secondYAxisFlag)					ratio = heightRatio2;				else					ratio = heightRatio;				infoBubble = new InfoBubble(h, yMax, setInfoText(me.currentTarget) , me.currentTarget.bubbleColor);				infoBubble.x = me.currentTarget.x + 50;				infoBubble.y = me.currentTarget.y - 50;			}			addChild(infoBubble);			infoTimer.start();		}		public function infoDestruct(te:TimerEvent)		{			deselectAll();			var currInfoBubble:InfoBubble = infoBubble as InfoBubble;			if (currInfoBubble != null) 			{				currInfoBubble.animateOut(cleanUpOldInfo, currInfoBubble);			}			infoTimer.stop();		}		public function cleanUpOldInfo(iBubble)		{			//trace ("Clean Up");			try			{				removeChild(iBubble);			}			catch (err:Error)			{				//trace("remove child error ignored");			}		}		public function cleanUp()		{			Tweener.removeAllTweens();			if (infoTimer != null)			{				if (infoTimer.hasEventListener(TimerEvent.TIMER))	infoTimer.removeEventListener(TimerEvent.TIMER, infoDestruct);			}			removeLinkEventListeners();		}				//interface functions		public function generateBars(){}		public function generateLine(i){}		public function animateLines(){}		public function generateLegend(titles:Array){}		protected function removeLinkEventListeners(){}			}	}