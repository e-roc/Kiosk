package  com.locusenergy.charts{		import flash.display.*;	import flash.geom.Matrix;	import caurina.transitions.Tweener;		public class Bar extends MovieClip{				// Constants:		public static const initialBarHeight = 1;		// Public Properties:		public var barWidth:Number;		public var barHeight:Number;		public var barDepth:Number;		public var gridHeight:Number;		public var xVal:Number;		public var yVal:Number;				public var horI:int;				public var xPosition:Number;		public var yPosition:Number;		public var barTop:MovieClip;		public var barSide:MovieClip;		public var updateIterator:int;		public var t:Number;		public var delay:Number;		public var bar:MovieClip;		public var isSelected:Boolean;				// Private Properties:		var matrix:Matrix;		var colorsArray;		var alphasArray;		var ratiosArray;		// Initialization:		public function Bar(h, gridH, barW, i) {			barWidth = barW * 0.7;			barHeight = h;			gridHeight = gridH;			xPosition = 0; //xPos - 4;			yPosition = 0//;(gridH-h)+8;			isSelected = false;			horI = i;			barDepth = gridH * 0.02;			animateBar(i);		}				// Public Methods:		public function highlightSelected()		{			setSelectedColors();			fillBars();			isSelected = true;		}		public function deselect()		{			if(isSelected)			{				setDeselectedColors();				fillBars();				isSelected = false;			}		}		public function setSelectedColors()		{			//main bar			matrix = new Matrix();			colorsArray = new Array(0x6BA400, 0xBED63A);			alphasArray = new Array(1.0, 1.0);			ratiosArray = new Array(0,128);			matrix.createGradientBox( barWidth, gridHeight, Math.PI/2);						//top			barTop.graphics.clear();			barTop.graphics.beginFill(0x5C8D00);						//side			barSide.graphics.clear();			barSide.graphics.beginFill(0x406E47);		}		public function setDeselectedColors()		{			//main bar			matrix = new Matrix();			colorsArray = new Array(0xFBA000, 0xFFC700);			alphasArray = new Array(1.0, 1.0);			ratiosArray = new Array(0,128);			matrix.createGradientBox( barWidth, gridHeight, Math.PI/2);						//top			barTop.graphics.clear();			barTop.graphics.beginFill(0xFFAE00);						//side			barSide.graphics.clear();			barSide.graphics.beginFill(0xC27200);		}		public function fillBars()		{			//trace("Bar height " + barHeight);			//fill Main bar			bar.graphics.beginGradientFill("linear",colorsArray, alphasArray, ratiosArray, matrix, SpreadMethod.REFLECT, InterpolationMethod.LINEAR_RGB);			bar.graphics.drawRect(xPosition, yPosition,barWidth,barHeight);			bar.graphics.endFill();			//fill top			barTop.graphics.moveTo(xPosition + barWidth, yPosition);			barTop.graphics.lineTo(xPosition + barWidth + barDepth, yPosition - barDepth);			barTop.graphics.lineTo(xPosition + barWidth + barDepth, yPosition - barDepth);			barTop.graphics.lineTo(xPosition + barDepth, yPosition - barDepth);			barTop.graphics.lineTo(xPosition, yPosition);			barTop.graphics.endFill();			//fill side			barSide.graphics.moveTo(xPosition + barWidth, barTop.y); //4			barSide.graphics.lineTo(xPosition + barWidth + barDepth, barTop.y - barDepth); //3			barSide.graphics.lineTo(xPosition + barWidth + barDepth, yPosition - barDepth); //2			barSide.graphics.lineTo(xPosition + barWidth, yPosition); //1			barSide.graphics.lineTo(xPosition + barWidth, yPosition - (initialBarHeight*updateIterator)); //4			barSide.graphics.endFill();		}				public function animateBar(i)		{			t = (barHeight/gridHeight) * 5;			delay = .02;						bar = new MovieClip();			barSide = new MovieClip();			barTop = new MovieClip();						this.addChild(bar);			this.addChild(barSide);						setDeselectedColors();			fillBars();						Tweener.addTween(bar,{scaleY: 1/barHeight, time: 0});			Tweener.addTween(bar,{scaleY: -1, time: t, delay: i*delay});			drawTop(i);					}				function drawTop(i)		{			//barTop			barTop = new MovieClip();			barTop.graphics.beginFill(0xFFAE00);			barTop.graphics.moveTo(xPosition + barWidth, yPosition);			barTop.graphics.lineTo(xPosition + barWidth + barDepth, yPosition - barDepth);			barTop.graphics.lineTo(xPosition + barWidth + barDepth, yPosition - barDepth);			barTop.graphics.lineTo(xPosition + barDepth, yPosition - barDepth);			barTop.graphics.lineTo(xPosition, yPosition);			barTop.graphics.endFill();			this.addChild(barTop);			updateIterator = 0;			Tweener.addTween(barTop,{y: -barHeight, time: t, delay: i*delay*1.001, onUpdate:drawSide});		}				function drawSide()		{			//barSide			updateIterator++;			//trace("Bar: " + this +"yPos:"+barTop.y + " ["+updateIterator + "]");			barSide.graphics.clear();			setSideFill();			barSide.graphics.moveTo(xPosition + barWidth, barTop.y); //4			barSide.graphics.lineTo(xPosition + barWidth + barDepth, barTop.y - barDepth); //3			barSide.graphics.lineTo(xPosition + barWidth + barDepth, yPosition - barDepth); //2			barSide.graphics.lineTo(xPosition + barWidth, yPosition); //1			barSide.graphics.lineTo(xPosition + barWidth, yPosition - (initialBarHeight*updateIterator)); //4			barSide.graphics.endFill();			//this.addChild(barSide);		}				function setSideFill()		{			if (isSelected)			{				barSide.graphics.beginFill(0x406E47);			}			else			{				barSide.graphics.beginFill(0xC27200);			}		}		// Protected Methods:	}	}