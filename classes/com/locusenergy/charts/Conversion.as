package com.locusenergy.charts {		public class Conversion{				// Constants:		// Public Properties:		public var date:Date = new Date();		public var monthOffset;		public var dayOffset;		public var dayOfMonthOffset;		public var year;		private var daysInPrevMonth:Number;		// Private Properties:			// Initialization:		public function Conversion()		{			monthOffset = date.getMonth();			dayOffset = date.getDay();			dayOfMonthOffset = date.getDate();			year = date.getFullYear();			daysInPrevMonth = new Date(date.getFullYear(), monthOffset, 0).getDate() as Number;		}		// Public Methods:		public function yesterday()		{			//trace ("old day offest",monthOffset,"/",dayOfMonthOffset);			if ((dayOffset -= 1) == -1)				dayOffset = 6;			if ((dayOfMonthOffset -= 1) == 0)			{				monthOffset -= 1;				dayOfMonthOffset = daysInPrevMonth;				daysInPrevMonth = new Date(date.getFullYear(), monthOffset, 0).getDate() as Number;			}		}		public function getWeekdaysArray():Array		{			var days:Array = new Array();						for (var i=0; i<7; i++)			{				var calc = (i+dayOffset + 1)%7;				var labelObject = new Object();				switch (calc)				{					case 0:						labelObject = {shortName:"Sun", longName:"Sunday"};						break;					case 1:						labelObject = {shortName:"Mon", longName:"Monday"};						break;					case 2:						labelObject = {shortName:"Tues", longName:"Tuesday"};						break;					case 3:						labelObject = {shortName:"Wed", longName:"Wednesday"};						break;					case 4:						labelObject = {shortName:"Thurs", longName:"Thursday"};						break;					case 5:						labelObject = {shortName:"Fri", longName:"Friday"};						break;					case 6:						labelObject = {shortName:"Sat", longName:"Saturday"};						break;					default:						labelObject = {shortName:"OO", longName:"Out Of Bounds"};				}				days.push(labelObject);			}			return days;		}		public function getDaysOfMonthArray():Array		{						var days:Array = new Array();			for (var i=0; i<31; i++)			{				var labelObject = new Object();								var calc = (i + (daysInPrevMonth - 30) + dayOfMonthOffset) % daysInPrevMonth;				var month = monthOffset - (Math.floor((30 + (30 - dayOfMonthOffset)  - (i%30))/30) -  Math.floor(i/30)) + 1;								//month/day calculations don't apply on the 31st of a month				if (dayOfMonthOffset == 31 && i == 30)				{					calc = dayOfMonthOffset;					month = monthOffset + 1;				}								//Push back month or day				if (month <=0) month += 12;				if (calc == 0) calc = daysInPrevMonth;				if (i == 30) longName = "Today";				var longName = getNumberWithuffix(calc) + " of " + getMonthName(month-1).longName;								labelObject = {shortName: month + "/" + calc, longName: longName};				days.push(labelObject);				//trace("show day offset", labelObject.shortName);							}			return days;		}		public function getMonthsArray():Array		{			var months:Array = new Array();						for (var i=0; i<12; i++)			{				var calc = (i + monthOffset + 1)%12;				var labelObject = new Object();				switch (calc)				{					case 0:						labelObject = {shortName:"Jan", longName:"January"};						break;					case 1:						labelObject = {shortName:"Feb", longName:"February"};						break;					case 2:						labelObject = {shortName:"Mar", longName:"March"};						break;					case 3:						labelObject = {shortName:"Apr", longName:"April"};						break;					case 4:						labelObject = {shortName:"May", longName:"May"};						break;					case 5:						labelObject = {shortName:"Jun", longName:"June"};						break;					case 6:						labelObject = {shortName:"Jul", longName:"July"};						break;					case 7:						labelObject = {shortName:"Aug", longName:"August"};						break;					case 8:						labelObject = {shortName:"Sep", longName:"September"};						break;					case 9:						labelObject = {shortName:"Oct", longName:"October"};						break;					case 10:						labelObject = {shortName:"Nov", longName:"November"};						break;					case 11:						labelObject = {shortName:"Dec", longName:"December"};						break;					default:						labelObject = {shortName:"OO", longName:"Out Of Bounds"};				}				months.push(labelObject);							}				return months;		}		public function getMonthName(num):Object		{			var month:String;			var labelObject = new Object();			switch (num)			{				case 0:					labelObject = {shortName:"Jan", longName:"January"};					break;				case 1:					labelObject = {shortName:"Feb", longName:"February"};					break;				case 2:					labelObject = {shortName:"Mar", longName:"March"};					break;				case 3:					labelObject = {shortName:"Apr", longName:"April"};					break;				case 4:					labelObject = {shortName:"May", longName:"May"};					break;				case 5:					labelObject = {shortName:"Jun", longName:"June"};					break;				case 6:					labelObject = {shortName:"Jul", longName:"July"};					break;				case 7:					labelObject = {shortName:"Aug", longName:"August"};					break;				case 8:					labelObject = {shortName:"Sep", longName:"September"};					break;				case 9:					labelObject = {shortName:"Oct", longName:"October"};					break;				case 10:					labelObject = {shortName:"Nov", longName:"November"};					break;				case 11:					labelObject = {shortName:"Dec", longName:"December"};					break;				default:					labelObject = {shortName:"OO", longName:"Out Of Bounds"};			}			return labelObject;		}		public function getHoursArray()		{			var hours:Array = new Array();			var labelObject = new Object();			for (var i=0; i<29; i++)			{				var short = (i - 2)%12;				if (short == 0) short = 12;				labelObject =  {shortName: short + ":00", longName: (i-1)%12};				hours.push(labelObject);			}			return hours;		}		public function getLifeYearsArray(num):Array		{			var years:Array = new Array();						for (var i=0; i<num; i++)			{				var labelObject = new Object();				var thisYear = year - (num - i) + 1				labelObject = {shortName: "'" + thisYear.toString().substring(2,4), longName:thisYear};				years.push(labelObject);			}			return years;		}		public function getLifeMonthsArray(num):Array		{			var months:Array = new Array();			//var reps = Math.num/12			for (var i=0; i<num; i++)			{								var calc = (12 + i + monthOffset - (num%12) + 1) % 12				var labelObject = new Object();				var yearCalc = year - (Math.floor((num  - 2 + (12 - monthOffset)  - (i%12))/12) -  Math.floor(i/12));				var shortYear = yearCalc.toString().substring(2,4);				switch (calc)				{					case 0:						labelObject = {shortName:"Jan\n'" + shortYear, longName:"January " + yearCalc};						break;					case 1:						labelObject = {shortName:"Feb\n'" + shortYear, longName:"February " + yearCalc};						break;					case 2:						labelObject = {shortName:"Mar\n'" + shortYear, longName:"March " + yearCalc};						break;					case 3:						labelObject = {shortName:"Apr\n'" + shortYear, longName:"April " + yearCalc};						break;					case 4:						labelObject = {shortName:"May\n'" + shortYear, longName:"May " + yearCalc};						break;					case 5:						labelObject = {shortName:"Jun\n'" + shortYear, longName:"June " + yearCalc};						break;					case 6:						labelObject = {shortName:"Jul\n'"+ shortYear, longName:"July " + yearCalc};						break;					case 7:						labelObject = {shortName:"Aug\n'"+ shortYear, longName:"August " + yearCalc};						break;					case 8:						labelObject = {shortName:"Sep\n'" + shortYear, longName:"September " + yearCalc};						break;					case 9:						labelObject = {shortName:"Oct\n'" + shortYear, longName:"October " + yearCalc};						break;					case 10:						labelObject = {shortName:"Nov\n'" + shortYear, longName:"November " + yearCalc};						break;					case 11:						labelObject = {shortName:"Dec\n'" + shortYear, longName:"December " + yearCalc};						break;					default:						labelObject = {shortName:"OO", longName:"Out Of Bounds"};				}				months.push(labelObject);							}				return months;		}				public function getNumberWithuffix(num):String		{			var endString:String;			if ((num%10 ==1 || num == 1) && num != 11)			{				endString = 'st';			}			else if (num%20 == 2 || num == 2)			{				endString = 'nd';			}			else if (num%20 ==3 || num ==3)			{				endString = 'rd';			}			else			{				endString = 'th';						}			return num + endString;		}				// Protected Methods:	}}