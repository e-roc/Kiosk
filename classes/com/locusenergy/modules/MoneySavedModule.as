package com.locusenergy.modules {		import flash.text.*;	import flash.net.Responder;	import flash.events.Event;	import com.locusenergy.AssetLoader;	import com.locusenergy.Connector;	import com.locusenergy.meters.MeterOutput;	import caurina.transitions.Tweener;		public class MoneySavedModule extends KioskModule{				// Constants:		// Public Properties:		// Private Properties:		private var assetLoader:AssetLoader;		private var meterOutput;		private var money;		private var bag;		private var animTime;				// Initialization:		public function MoneySavedModule() 		{			componentName = "MoneySaved";			delayLoad = true;			assetLoader = new AssetLoader( "../bin/money.swf", displayMoneyBag);			meterOutput = new MeterOutput("SINCE INSTALLATION", "$", false);			addChild(meterOutput);			money = 0;						meterOutput.updateMeter(money);			meterOutput.x = 210;			meterOutput.y = 95;				addChild(shadowBox);								}		override public function getModuleData(connector)		{			this.connector = connector;			this.connector.getComponentData(componentName, loadMoney);			//poll();		}		public function loadMoney()		{			for (var i in connector.resultArray[0])			{								trace(connector.resultArray[1][i]);				var result;				switch (connector.resultArray[0][i].toString())				{					case "moneySaved" 			:	result = connector.resultArray[1][i];													break;								}			}			dispatchEvent(new Event("ModuleUpdated"));			dispatchEvent(new Event("DataLoaded"));			animTime = 2;			meterOutput.updateMeter(result, 40, animTime);			money = result;			animateDollarSignIn();		}		override public function liveUpdate(e)		{			connector.getComponentData(componentName, loadMoney);		}		public function animateDollarSignIn()		{			var yFinal = 50;			var t = 0.3;			var delayTime = 0;			var alfa = 0.5;			var scale = 0.7;						bag.dollarSign_mc.alpha = alfa;			Tweener.addTween(bag.dollarSign_mc, {y: yFinal, scaleX: scale, scaleY: scale, alpha:alfa, delay: delayTime, time:t, transition: "linear"});			delayTime = delayTime + t;									Tweener.addTween(bag.dollarSign_mc, {y: yFinal, scaleX: 1, scaleY: 1, alpha:alfa, delay: delayTime, time:t, transition: "easeInOutQuad"});			delayTime = delayTime + t;			Tweener.addTween(bag.dollarSign_mc, {y: yFinal, scaleX: scale, scaleY: scale, alpha:alfa, delay: delayTime, time:t, transition: "linear"});			delayTime = delayTime + t;							Tweener.addTween(bag.dollarSign_mc, {y: yFinal, scaleX: 1, scaleY: 1, alpha:alfa, delay: delayTime, time:t, transition: "easeInOutQuad"});			delayTime = delayTime + t;			Tweener.addTween(bag.dollarSign_mc, {y: yFinal, scaleX: scale, scaleY: scale, alpha:alfa, delay: delayTime, time:t, transition: "linear"});			delayTime = delayTime + t;							Tweener.addTween(bag.dollarSign_mc, {y: yFinal, scaleX: 1, scaleY: 1, alpha:alfa, delay: delayTime, time:t, transition: "easeInOutQuad"});			delayTime = delayTime + t;			Tweener.addTween(bag.dollarSign_mc, {y: yFinal, scaleX: scale, scaleY: scale, alpha:alfa, delay: delayTime, time:t, transition: "linear"});			delayTime = delayTime + t;							Tweener.addTween(bag.dollarSign_mc, {y: yFinal, scaleX: 1, scaleY: 1, alpha:1, delay: delayTime, time:t});		}		public function displayMoneyBag(asset)		{			bag = asset;			addChild(bag);			bag.x = 160;			bag.y = 88;			dispatchEvent(new Event("StartDataLoad"))		}		override public function cleanUp()		{			cleanUpTimer();		}		// Public Methods:		// Protected Methods:	}	}