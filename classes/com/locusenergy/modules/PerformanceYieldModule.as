package com.locusenergy.modules {		import flash.text.*;	import com.locusenergy.AssetLoader;	import com.locusenergy.Connector;	import caurina.transitions.Tweener;	import flash.net.Responder;	import flash.events.*;	import flash.display.*;	import flash.geom.Matrix;	import com.locusenergy.meters.MeterOutput;		public class PerformanceYieldModule extends KioskModule{				// Constants:		// Public Properties:		// Private Properties:		private var assetLoader:AssetLoader;		private var meterOutput;		private var actualIr;		private var maxIr;		private var percent;		private var pieColor;		private var rectWidth;		private var rectHeight;		private var lastPercent;		private var oldRot;		private var percentDelta;		private var animTime;		private var pie:Sprite;		private var radius;		private var steps;		// Initialization:		public function PerformanceYieldModule() 		{			addChild(shadowBox);			delayLoad = true;			componentName = "PerformanceYield";			assetLoader = new AssetLoader( "../src/assets/pngs/Irradiance.png", displayChart);			meterOutput = new MeterOutput("ACTUAL/MAX IRRADIANCE", "%", false);			addChild(meterOutput);			actualIr = 0;			maxIr = 1;			percent = 0;			lastPercent = 0;			percentDelta = 0;			meterOutput.x = 40;			meterOutput.y = 95;		}		override protected function loadData()		{			for (var i in connector.resultArray[0])			{				switch (connector.resultArray[0][i].toString())				{					case "actualIr" 			:	actualIr = connector.resultArray[1][i];													break;					case "maxIr" 				:	maxIr = connector.resultArray[1][i];													break;											}			}			setIrPercent();			dispatchEvent(new Event("DataLoaded"));					}		override public function liveUpdate(e)		{			connector.getComponentData(componentName, loadData);		}				public function setIrPercent()		{			percent = actualIr/maxIr * 100;			percentDelta = percent - lastPercent;						animTime = 2*percent/100;			meterOutput.updateMeter(percent, 40, animTime);			dispatchEvent(new Event("ModuleUpdated"));			updatePieChart()		}		public function displayChart(pieChart)		{			addChild(pieChart);			drawPieChart();			timerInterval = 3000;			pieChart.x = 220;			pieChart.y = 88;		}			// Pie Chart Methods:		public function drawPieChart()		{			pieColor = 0xfdce09;			rectWidth = 26;			rectHeight = 1;			radius = rectWidth/2;			steps = 500;			pie = new Sprite();			var bgCircle = new Sprite();			var colorsArray = new Array(0x93703A, 0xC48D35);//0x001C39, 0x072746,			var alphasArray = new Array(1.0, 1.0);			var ratiosArray = new Array(0,255);			var matrix:Matrix = new Matrix();			matrix.createGradientBox( rectWidth, rectWidth, Math.PI);			bgCircle.graphics.beginGradientFill("linear", colorsArray, alphasArray, ratiosArray, matrix, SpreadMethod.PAD, InterpolationMethod.LINEAR_RGB);			bgCircle.graphics.drawCircle(0,0,rectWidth);			bgCircle.graphics.endFill();			bgCircle.alpha = 0;			pie.addChild(bgCircle);						Tweener.addTween(bgCircle, {alpha: 1, time: .5 });			oldRot = 0;						addChild(pie);			pie.x = 293;			pie.y = 142;			triggerData(null);		}		public function updatePieChart()		{			var newRot = (percent/100 * steps)			if (newRot > oldRot)				for(var i = oldRot; i < newRot ;i++) //iMax/steps = percent					drawRect(i);			else if (newRot < oldRot)				for(var j = oldRot; j > newRot; j--)					removeRect(j);			oldRot = newRot;					}		public function drawRect(i)		{			var rot:Number = i * 360 / steps;			var rect:Sprite = filledRectangle(rectWidth, rectHeight, pieColor);			rect.x = radius * Math.cos(rot * Math.PI/180);			rect.y = radius * Math.sin(rot * Math.PI/180);			rect.rotation = rot;			pie.addChild(rect);			rect.alpha = 0;			var t = animTime/(steps * percent/100);			Tweener.addTween(rect, {alpha:1, delay:i*t, time:t, transition: "linear"});		}		private function removeRect(i)		{			var rectTemp = pie.getChildAt(pie.numChildren - 1);			var t = animTime/(steps * percent/100);			trace("Remove rect", i, rectTemp);			Tweener.addTween(rectTemp, {alpha:0, delay:i*t, time:t, transition: "linear", onComplete:removeTopChild});		}		private function removeTopChild()		{			pie.removeChildAt(pie.numChildren-1);		}		private function filledRectangle(width:uint, height:uint, color:uint):Sprite		{			var rect:Sprite = new Sprite();			rect.graphics.beginFill(color, 0.3);			rect.graphics.drawRect(-width/2, -height/2, width, height);			rect.graphics.endFill();			return rect;		}				override public function cleanUp()		{			cleanUpTimer();			removeAllChildren();			Tweener.removeAllTweens();		}		// Protected Methods:	}	}