package com.locusenergy.modules {		import com.locusenergy.meters.MeterOutput;	import com.locusenergy.Connector;	import com.locusenergy.AssetLoader;	import com.locusenergy.AssetCache;	import com.locusenergy.menus.*;	import flash.display.Sprite;	import flash.display.Bitmap;	import flash.display.BitmapData;	import flash.events.MouseEvent;	import flash.events.Event;	import flash.events.EventDispatcher;		public class EnvironmentalBenefitsModule extends KioskModule{				// Constants:		// Public Properties:		//private var meterOutputs:Array = new Array();		private var titles:Array = new Array();		private var units:Array = new Array();		private var values:Array = new Array();		private var imageURLs:Array = new Array();		private var spacing = 190;		private var imageXPos = 50;		private var size:String;		private var sideMenu:Menu;		private var container:Sprite;		private var assetsLoaded = 0;		private var imageContainer:Sprite = new Sprite();		private var customTitle:String =  new String();		// Private Properties:			// Initialization:		public function EnvironmentalBenefitsModule(size) 		{			componentName =  "EnvironmentalBenefits";			//delayLoad = true;			this.size = size;									if (!AssetCache.hideDayView)				this.type = "Day";			else				this.type = "Week";			paramArray["timeseries"] = type;						if (size == "large")				loadSideMenu(0);			else				addChild(shadowBox);		}		override public function getModuleData(connector)		{			this.connector = connector;			this.connector.getComponentData(componentName, loadData, paramArray)		}		override protected function loadData()		{			for (var i in connector.resultArray[0])			{				switch (connector.resultArray[0][i].toString())				{					case "moduleTitle" 		:	customTitle = connector.resultArray[1][i];												break;					case "titles" 			:	titles = connector.resultArray[1][i];												break;					case "units" 			:	units = connector.resultArray[1][i];												break;					case "values" 			:	values = connector.resultArray[1][i];												break;														case "imageURLs" 		:	imageURLs = connector.resultArray[1][i];												break;											}			}			//this.replaceTitle(customTitle);			this.replaceTitle(customTitle);						dispatchEvent(new Event("DataLoaded"));			if (container == null)				displayEnvBen();			else				updateEnvBen()					}		private function updateEnvBen()		{			for (var i in titles)			{				if (container.getChildByName("meterOutput"+i) != null)					(container.getChildByName("meterOutput"+i) as MeterOutput).updateMeter(values[i]);			}			dispatchEvent(new Event("ModuleUpdated"));		}		private function displayEnvBen()		{					container = new Sprite();			container.name = "container";			var textYPos = 150;			var xStartPos = 0;			for (var i in titles)			{				var meterOutput:MeterOutput;				meterOutput = new MeterOutput(titles[i], units[i], false, 2);				meterOutput.name = "meterOutput"+i;				meterOutput.updateMeter(values[i]);				meterOutput.x = xStartPos;				meterOutput.y = textYPos;								container.addChild(meterOutput);				xStartPos += spacing;			}			placeImages();			container.addChild(imageContainer);			addChild(container);			if(size == "large")				resizeModule();								}				private function placeImages()		{			var imageYPos = 70;			for (var i in AssetCache.envBenArray)			{				trace(i, AssetCache.envBenArray[i]);				var bitmap:Bitmap = new Bitmap(AssetCache.envBenArray[i].getChildAt(0).bitmapData.clone());				addChild(bitmap);				bitmap.x = imageXPos;				bitmap.y = imageYPos;				imageContainer.addChild(bitmap);				imageXPos += spacing			}		}		private function loadSideMenu(i) {			sideMenu=new Menu("SIDE",i);						if (!AssetCache.hideDayView)				sideMenu.addMenuItem("DAY","","Day");			sideMenu.addMenuItem("WEEK","","Week");			sideMenu.addMenuItem("MONTH","","Month");			sideMenu.addMenuItem("YEAR","","Year");			sideMenu.addMenuItem("LIFE","","Life");			for (var i = 0; i < sideMenu.menuItemArray.length; i++) {				sideMenu.menuItemArray[i].index=i;				sideMenu.menuItemArray[i].addEventListener(MouseEvent.CLICK, clickEvent, false, 0, true);			}			dispatchEvent(new Event("SideMenuLoadedEvent"));			addChild(sideMenu);			if(size == "large")				resizeMenu();		}		private function clickEvent(me:MouseEvent) {			if (sideMenu != null)	removeSideMenu();			loadSideMenu(me.currentTarget.index);			type = me.currentTarget.obj;			paramArray["timeseries"] = type;			connector.getComponentData(componentName, loadData, paramArray);		}				protected function resizeMenu()		{			sideMenu.scaleX = 0.52;			sideMenu.scaleY = 0.52;			sideMenu.x = 480;			sideMenu.y=65;		}		protected function resizeModule()		{			var scale = 0.90;			container.y = 30;			container.x = -40;			container.scaleX = scale;			container.scaleY = scale;		}		override public function liveUpdate(e)		{			connector.getComponentData(componentName, loadData, paramArray);		}		protected function removeSideMenu()		{			for (var i = 0; i < sideMenu.menuItemArray.length; i++) {				sideMenu.menuItemArray[i].index=i;				sideMenu.menuItemArray[i].removeEventListener(MouseEvent.CLICK, clickEvent);			}			removeChild(sideMenu);		}		protected function clearModule() {			if (sideMenu != null)				removeSideMenu();			if (container != null)				removeChild(container);		}		override public function cleanUp()		{			clearModule();			connector.cleanUp();			removeAllChildren();		}	}	}