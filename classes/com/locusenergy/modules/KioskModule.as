package com.locusenergy.modules{	import flash.display.*;	import flash.text.*;	import flash.filters.DropShadowFilter;	import flash.events.ProgressEvent;	import flash.events.Event;	import flash.events.EventDispatcher;	import flash.events.TimerEvent;	import flash.utils.Timer;	import com.locusenergy.ShadowBox;	import com.locusenergy.AssetCache;	import caurina.transitions.Tweener;		public class KioskModule extends Sprite	{		public var shadowBox:ShadowBox;		public var timerInterval:Number	=	AssetCache.refreshSpeed;		public var type;		public var module:Sprite;		public var moduleWidth;		public var moduleHeight;		public var timer:Timer;		public var connector;		public var delayLoad:Boolean;				protected var modulePosX;		protected var modulePosY;		protected var bgColor:uint = 0x3d5f89;		protected var title = "default";		protected var paramArray:Array;		protected var componentName:String;		protected var titleFormat:TextFormat;						var titleText:TextField;				public function KioskModule()		{			titleText = new TextField();			titleFormat 	= new TextFormat("Gotham Narrow Book",30,0xffffff);			paramArray = new Array();			initialize();		}		public function getModuleData(connector)		{			this.connector = connector;			this.connector.getComponentData(componentName, loadData)		}		protected function loadData(){}		public function setHeight(h:Number)		{			moduleHeight = h;		}		public function setTitle(moduleTitle:String)		{			title = moduleTitle;		}		public function replaceTitle(newTitle)		{			titleText.defaultTextFormat = titleFormat; 			titleText.text = newTitle;		}		public function setType(type:String){							}		public function initialize()		{			moduleWidth = 595;			moduleHeight = 230;			shadowBox = new ShadowBox(moduleWidth, 0.75 * moduleHeight);			shadowBox.y = 50;		}		public function setPosition(horizPos, vertPos)		{			this.y = vertPos;			this.x = horizPos;		}		public function loadModule()		{	// does something with module data			titleText.embedFonts 	= true;			titleText.text 			= title;			titleText.antiAliasType = flash.text.AntiAliasType.ADVANCED;			titleText.alpha			= 0.9;			titleText.textColor 	= 0xffffff;			titleText.autoSize 		= TextFieldAutoSize.LEFT;			titleText.x 			= 0;			titleText.y 			= 0;			titleText.setTextFormat(titleFormat);									this.graphics.beginFill(bgColor, 0.0);			this.graphics.lineStyle(0,0x555555,0.0);			this.graphics.drawRect(0,0,moduleWidth,moduleHeight);			this.graphics.endFill();			/*	this.x = modulePosX;			this.y = modulePosY;*/						var dropShadow:DropShadowFilter = new DropShadowFilter();			dropShadow.alpha = 0.6;			dropShadow.blurX = 12;			dropShadow.blurY = 12;			titleText.filters = new Array(dropShadow);				}		public function displayModule()		{			addChild(titleText);		}		public function poll()		{			timer = new Timer(timerInterval);			timer.addEventListener(TimerEvent.TIMER, liveUpdate, false, 0, true);			//timer.addEventListener(TimerEvent.TIMER, trackUpdate);			timer.start();		}		private function trackUpdate(e)		{			trace("UPDATING FROM WITHIN A MODULE");		}		public function cleanUpTimer()		{			if (timer != null)			{				if (timer.running)					timer.stop();				if (timer.hasEventListener(TimerEvent.TIMER))					timer.removeEventListener(TimerEvent.TIMER, liveUpdate);			}		}		protected function removeAllChildren()		{			while (this.numChildren)			{				this.removeChildAt(0);			}		}		public function liveUpdate(e)		{			dispatchEvent(new Event("ModuleUpdated"));		}		public function triggerData(e)		{			//trace("Trigger");			dispatchEvent(new Event("StartDataLoad")); 		}		public function cleanUp()		{			Tweener.removeAllTweens();					}			}	}