package com.locusenergy.modules {		import com.locusenergy.AssetLoader;	import com.locusenergy.AssetCache;	import com.locusenergy.Connector;	import com.locusenergy.meters.MeterOutput;	import flash.events.Event;					import flash.events.EventDispatcher;	import flash.text.TextField;	import flash.text.TextFormat;	import flash.text.AntiAliasType;	import flash.net.Responder;	import flash.display.Sprite;			public class CurrentWeatherModule extends KioskModule{				// Constants:		// Public Properties:		// Private Properties:		private var irradianceOutput;		private var windSpeedOutput;		private var panelTempOutput;		private var ambientTempOutput;				private var irradiance;		private var windSpeed;		private var ambientTemp;		private var panelTemp;		private var irradianceLabel;		private var windSpeedLabel;		private var ambientTempLabel;		private var panelTempLabel;		private var sun:Sprite;		private var wind:Sprite;		private var thermo:Sprite;		private var panelThermo:Sprite;		private var windSpeedInMetric:Boolean = true;		private var show;		// Initialization:		public function CurrentWeatherModule(size) 		{			addChild(shadowBox);			delayLoad = false;			show = size;			componentName = "CurrentWeather";			displayChart();			setupReadout();		}		override protected function loadData()		{			for (var i in connector.resultArray[0])			{					switch (connector.resultArray[0][i].toString())					{						case "irradiance" 		:	irradianceOutput.updateMeter(connector.resultArray[1][i]);														break;						case "windSpeed" 		:	windSpeedOutput.updateMeter(connector.resultArray[1][i]);														break;						case "ambientTemp" 		:	ambientTempOutput.updateMeter(connector.resultArray[1][i]);														break;										case "panelTemp" 		:	panelTempOutput.updateMeter(connector.resultArray[1][i]);														break;													}			}			dispatchEvent(new Event("DataLoaded"));			dispatchEvent(new Event("ModuleUpdated"));		}		public function displayChart()		{			var yAdj = 30;			sun = AssetCache.weatherSun;			thermo = AssetCache.weatherThermo;			wind = AssetCache.weatherWind;			panelThermo = AssetCache.weatherPanel;			sun.y = 70.15 + yAdj;			wind.y = 161 + yAdj;			thermo.y = 70.15 + yAdj;			panelThermo.y = 161 + yAdj;			if (show == "full")			{				addChild(sun);				addChild(panelThermo);			}			else			{				yAdj = 140				wind.y = yAdj;				thermo.y = yAdj;			}			addChild(wind);			addChild(thermo);			triggerData(null);		}		public function setupReadout()		{			//var textFormat:TextFormat = new TextFormat("Light", 12, 0xffffff);			var vertSpacing = 100;			var col1XPos = -15;			var col2XPos = col1XPos + 300;			var startY = 70;						irradianceLabel = "IRRADIANCE";			windSpeedLabel = "WIND SPEED";				ambientTempLabel = "AMBIENT TEMP";			panelTempLabel = "CELL TEMP";						irradianceOutput = new MeterOutput(irradianceLabel,"W/m2",false,1);						if (AssetCache.windSpeedInMetric)				windSpeedOutput = new MeterOutput(windSpeedLabel, "m/s", false,1);			else				windSpeedOutput = new MeterOutput(windSpeedLabel, "mph", false,1);							ambientTempOutput = new MeterOutput(ambientTempLabel,"F", false,1);			panelTempOutput = new MeterOutput(panelTempLabel, "F", false,1);						irradianceOutput.y = startY;			irradianceOutput.x = col1XPos;			windSpeedOutput.y = irradianceOutput.y + vertSpacing;			windSpeedOutput.x = col1XPos;								ambientTempOutput.y = startY;				ambientTempOutput.x = col2XPos;			panelTempOutput.y = windSpeedOutput.y;			panelTempOutput.x = col2XPos;						if (show == "full")			{				addChild(irradianceOutput);				addChild(panelTempOutput);				drawCrossLines();							}			else			{				var yAdj = 100;				ambientTempOutput.y = yAdj;				windSpeedOutput.y = yAdj;				drawVertLine();			}			addChild(windSpeedOutput);			addChild(ambientTempOutput);					}		override public function liveUpdate(te)		{			connector.getComponentData(componentName, loadData);		}		private function drawCrossLines()		{			var horizLineYPos = 155;			var lineSpacing = 20;			this.graphics.lineStyle(1, 0xFFFFFF, 0.2);			this.graphics.moveTo(lineSpacing, horizLineYPos);			this.graphics.lineTo(this.width/2 - lineSpacing, horizLineYPos);				this.graphics.moveTo(this.width/2 + lineSpacing, horizLineYPos);			this.graphics.lineTo(this.width - lineSpacing, horizLineYPos);					this.graphics.moveTo(this.width/2, 72 );			this.graphics.lineTo(this.width/2, horizLineYPos - lineSpacing);				this.graphics.moveTo(this.width/2, horizLineYPos + lineSpacing);			this.graphics.lineTo(this.width/2, horizLineYPos + 85);			}		private function drawVertLine()		{			this.graphics.lineStyle(1, 0xFFFFFF, 0.2);			this.graphics.moveTo(this.width/2, 100 );			this.graphics.lineTo(this.width/2, 165);		}		override public function cleanUp()		{			cleanUpTimer();			connector.cleanUp();			removeAllChildren();		}	}}