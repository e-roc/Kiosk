package com.locusenergy{	import flash.display.*;	import com.locusenergy.menus.*;	import com.locusenergy.panels.*;	import com.locusenergy.AssetManager;	import com.locusenergy.meters.Meter;	import flash.events.MouseEvent;	import flash.events.*;	import flash.utils.getDefinitionByName;	import flash.ui.Mouse;	import flash.net.*;	import flash.text.*;	import flash.utils.Timer;	import flash.events.FullScreenEvent;	import caurina.transitions.Tweener;	import flash.external.*;			public class KioskMain extends MovieClip	{		public var slideshowResume:Number = 4000;		public var slideshowSpeed = 5;		public var overviewDelay = 5;		public var mainMC:MovieClip;		public var slideshowDelay;		public var currentPanel;		public var connector:Connector;		public var fullScreenBtn:Sprite;		public var slideshowBtn:Sprite;		private var overButton:Sprite;				public var preLoad:PreLoader;		private var slideshowLabel:TextField;		private var mainMenu:Menu;		private var overviewPanel:OverviewModuleController;		private var howItWorksPanel:HowItWorksPanel;		private var livePanel:LiveDataPanel;		private var infoPanel:ProjectInfoPanel;		private var customPanel:CustomPanel;		private var queryStrings;		public var refreshSpeed;		private var loadAssetArray:LoadAssetArray;		private var customFlag:Boolean;		private var customName:String;		private var preloadText:TextField;		private var textFormat:TextFormat;		private var debug:Boolean = false;		private var blockMenu:Boolean = false;		private var preloadRemoved:Boolean = false;		private var moveToNextSlide:Boolean = false;		private var restartCount:int;		private var internalSlideshowPlaying:Boolean = false;		private var slideshowResumeTimer:Timer;		private var overviewTimer:Timer;		private var overviewFirstPass:Boolean = true;		private var allowFullScreenMode:Boolean = true;		private var spinner:Spinner_mc;		private var fullBannerLogo = false;		private var hideHIW = false;		var txt = new TextField();		var faults:String = '';		var slideshowMode:Boolean;		var sprite:Sprite;		var slideshowIndex;		var slideshowOn = false;		var slideshowTimer:Timer;		var slideshowCount;		var messageBox:Sprite;		var ref;				public function KioskMain()		{			//Font.registerFont(GothamNarrowMedium);			//Font.registerFont(GothamNarrowBook);			showPreloader();			preloadFLA();		}		private function preloadFLA()		{			stop();			var digitalMeter:DigitalMeter_mc = new DigitalMeter_mc();			var analogMeter:Meter_mc = new Meter_mc();			var netMeter:NetMeter_mc = new NetMeter_mc();						this.loaderInfo.addEventListener(ProgressEvent.PROGRESS, preloading, false, 0, true);			this.loaderInfo.addEventListener(Event.COMPLETE, connectToServer);		}		private function preloading(event)		{			preloadText.text="Preloading";			var pcent:Number=event.bytesLoaded/event.bytesTotal*100;			//Stretch the bar			//lbar.scaleX=pcent/100;			//Display the % loaded in textfield			preloadText.text="Loading " + int(pcent)+"%";			//If the movie is fully loaded, kick to the next frame on the main timeline			//You may wish to change the gotoAndStop(2) to a gotoAndPlay(2)			if(pcent==99){				this.loaderInfo.removeEventListener (ProgressEvent.PROGRESS, preloading);				preloadText.text="''";			}		}		private function showPreloader()		{			spinner = new Spinner_mc();						spinner.x = (stage.stageWidth - spinner.width)/2;			spinner.y = 439;			spinner.alpha = 0;			addChild(spinner);			Tweener.addTween(spinner,{alpha: 0.5, time: 1});						preloadText = new TextField();			preloadText.embedFonts = true;			textFormat  = new TextFormat("Gotham Narrow Bold",18, 0xFFFFFF);			preloadText.defaultTextFormat = textFormat;			preloadText.text = "initializing\n";			preloadText.alpha = 0.5;			preloadText.autoSize = "left";			preloadText.y = stage.stageHeight/2 - preloadText.height/2;			preloadText.x = stage.stageWidth/2 - preloadText.width/2;			addChild (preloadText);					}		public function checkQueryString()		{			var queryStrings = this.loaderInfo.parameters;			trace(queryStrings);						var fullScreenMode = queryStrings.fs;			slideshowMode = queryStrings.ss;			if (queryStrings.ss != null)				txt.text += "slideshowMode: " + queryStrings.ss +"\n";							if (slideshowMode)			{				toggleStartSlideshow(new MouseEvent(MouseEvent.CLICK));			}		}		private function connectToServer(e:Event)		{			preloadText.text = 'Connecting';			connector = new Connector();			KioskMonitor.connector = connector;			this.connector.getComponentData("KioskMain", applySettings);			this.connector.addEventListener(NetStatusEvent.NET_STATUS, function(event){											if (event.info.code != "NetConnection.Connect.Success")												preloadText.text = event.info.code;											else												preloadText.text = "Connected.";											});		}		private function replaceCursor()		{			Mouse.hide();			sprite = new Sprite();			sprite.graphics.beginFill(0xFFFFFF,0.1);			sprite.graphics.drawRect(0,0,10,10);			sprite.graphics.endFill();			addChild(sprite);			stage.addEventListener(MouseEvent.MOUSE_MOVE, moveMouse, false, 0, true);					}		/* Message Logic - IN DEVELOPMENT		----------------------------------------------------------		public function showMessage(msgText, delTime)		{			var textFormat:TextFormat 	= new TextFormat("Gotham Narrow Medium", 18, 0xffffff);			var msg 				  	= new TextField();			msg.antiAliasType			= flash.text.AntiAliasType.ADVANCED;			msg.embedFonts 		  		= true;			msg.autoSize 		  		= TextFieldAutoSize.LEFT;			msg.selectable	  			= false;			msg.text 			  		= msgText.toUpperCase();			msg.setTextFormat(textFormat);			msg.alpha 					= 0.8;						messageBox = new Sprite();			var messageWidth = 300;			var messageHeight = 60;			messageBox.graphics.beginFill(0x000, 0.6);			messageBox.graphics.drawRoundRect(stage.stageWidth/2 - messageWidth/2, stage.stageHeight/2 - messageHeight/2, messageWidth,messageHeight, 15);			messageBox.graphics.endFill();						messageBox.addChild(msg);						msg.x = stage.stageWidth/2 - msg.width/2;			msg.y = stage.stageHeight/2 - msg.height/2;			mainMC.addChild(messageBox);			messageBox.alpha = 0;						trace("RESUME SLIDESHOW MESSAGE");			Tweener.addTween(messageBox, {time: 1, alpha: 1});			Tweener.addTween(messageBox, {time: 1, delay: delTime, alpha: 0, onComplete: removeMessageBox});		}		public function removeMessageBox()		{			trace("REMOVED SLIDESHOW MESSAGE");			removeChild(messageBox);					}*/				/*SLIDESHOW LOGIC 		----------------------------------------------------------*/		private function addSlideShowButton()		{			slideshowBtn = new Sprite();			slideshowLabel = new TextField();			var fmt:TextFormat = new TextFormat("Gotham Narrow Medium", 14, 0xFFFFFF);						slideshowLabel.defaultTextFormat 	= 	fmt;			slideshowLabel.embedFonts			= 	true;			slideshowLabel.text					=	"START SLIDESHOW";			slideshowLabel.selectable			=	false;			slideshowLabel.autoSize				= 	"left";			slideshowLabel.antiAliasType		=	AntiAliasType.ADVANCED;						slideshowBtn.graphics.beginFill(0x000000, 0.0);			slideshowBtn.graphics.drawRect(0,0, slideshowLabel.width,slideshowLabel.height);			slideshowBtn.graphics.endFill();			addChild(slideshowBtn);			slideshowBtn.addChild(slideshowLabel);			slideshowBtn.x = stage.stageWidth - slideshowLabel.width - 30;			slideshowBtn.y = 135;			slideshowBtn.addEventListener(MouseEvent.CLICK, toggleStartSlideshow, false, 0, true);		}		private function toggleStartSlideshow(e)		{				if (mainMC.hasEventListener(MouseEvent.MOUSE_MOVE))			{				mainMC.removeEventListener(MouseEvent.MOUSE_MOVE, doNotResumeSlideshow);				mainMC.removeEventListener(MouseEvent.CLICK, doNotResumeSlideshow);				slideshowResumeTimer.stop();				slideshowResumeTimer.removeEventListener(TimerEvent.TIMER, toggleStartSlideshow);			}					if (slideshowOn) 			{									stopSlideshow(e);			}			else			{								slideshowCount = 0;				slideshowLabel.text = "STOP SLIDESHOW";				createSlideShowStopButton();				slideshowOn = true;				slideshowTimer = new Timer(slideshowSpeed * 1000);				slideshowTimer.addEventListener(TimerEvent.TIMER, slideshowRotate);				slideshowTimer.start();				slideshowIndex = -1;				slideshowRotate(new Event("START"));			}		}		public function createSlideShowStopButton()		{			overButton = new Sprite();			overButton.addEventListener(MouseEvent.CLICK, stopSlideshow, false, 0, true);			overButton.graphics.beginFill(0x000000, 0.0);			overButton.graphics.drawRect(0,0, stage.stageWidth, stage.stageHeight);			overButton.graphics.endFill();			addChild(overButton);		}		private function stopSlideshow(e)		{			if(slideshowOn)			{				trace("Stopping Slideshow", e.target, e.currentTarget);				//Overview slideshow				if (currentPanel.hasEventListener("OverviewUpdateFinished"))					currentPanel.removeEventListener("OverviewUpdateFinished", progressSlideshow);				overviewFirstPass = true;				if	(overviewTimer.hasEventListener(TimerEvent.TIMER))				{					overviewTimer.stop();					overviewTimer.removeEventListener(TimerEvent.TIMER, overviewDelayDone);									}								slideshowLabel.text = "START SLIDESHOW";				overButton.removeEventListener(MouseEvent.CLICK, stopSlideshow);				removeChild(overButton);								slideshowTimer.reset();				slideshowTimer.stop();				if (slideshowTimer.hasEventListener(TimerEvent.TIMER)) slideshowTimer.removeEventListener(TimerEvent.TIMER, slideshowRotate);				slideshowOn = false;				if (currentPanel.hasInternalSlideshow) currentPanel.stopSlideshow(e);								if (slideshowResume != 0)				{					slideshowResumeTimer = new Timer(slideshowResume);					slideshowResumeTimer.addEventListener(TimerEvent.TIMER, toggleStartSlideshow, false, 0, true);					slideshowResumeTimer.start();										mainMC.addEventListener(MouseEvent.MOUSE_MOVE, doNotResumeSlideshow, false, 0, true);					mainMC.addEventListener(MouseEvent.CLICK, doNotResumeSlideshow, false, 0, true);				}			}			else				trace("Slideshow not running");		}		private function doNotResumeSlideshow(me:MouseEvent)		{			slideshowResumeTimer.reset();			slideshowResumeTimer.start();		}				public function startSlideshowMonitor()		{			trace("Starting Slideshow Monitor");			moveToNextSlide = false;			restartCount = 0; 			currentPanel.addEventListener("TabDataLoaded", allowSlideshowProgress, false, 0, true);					}				public function allowSlideshowProgress(e)		{			trace("Ending Slideshow Monitor");			moveToNextSlide = true;			currentPanel.removeEventListener("TabDataLoaded", allowSlideshowProgress);		}		private function overviewDelayDone(e)		{			trace("OVERVIEW TIMER DONE");			if	(overviewTimer.hasEventListener(TimerEvent.TIMER))			{				overviewTimer.stop();				overviewTimer.removeEventListener(TimerEvent.TIMER, overviewDelayDone);								}			slideshowRotate(new Event("OverviewDelayDone"));		}		private function slideshowRotate(e)		{			trace("SLIDESHOW ROTATE VARS", currentPanel, overviewFirstPass, e.type)									if (currentPanel is OverviewModuleController && overviewFirstPass)			{				slideshowTimer.stop();				slideshowTimer.reset();				trace("SLIDESHOW PAUSE FIRST PASS")				overviewFirstPass = false;				overviewTimer = new Timer(overviewDelay * 1000);				overviewTimer.addEventListener(TimerEvent.TIMER, overviewDelayDone, false, 0, true);				overviewTimer.start();							}			else			{				trace("Attempt to Rotate Slideshow");				overviewFirstPass = true;				var pattern:RegExp = new RegExp("Cycle: [0-9]");				if (txt.text.search(pattern) != - 1)				{					txt.text = txt.text.replace(pattern, "Cycle: "+restartCount);				}				else				{					txt.text += "\nCycle: 0";				}												if (moveToNextSlide || e.type == "OverviewDelayDone" || restartCount >= 3 || e.type == "START")				{					restartCount = 0; 					slideshowForward();				}				else				{					restartCount++;					if (txt.text.search(pattern) != - 1)					{						txt.text = txt.text.replace(pattern, "Cycle: "+restartCount);					}						trace("adding to restart count");					//slideshowTimer should continue to loop				}			}		}		private function slideshowForward()		{			trace("Moving to Next Slide");						if (slideshowIndex < mainMenu.menuItemArray.length - 1)				slideshowIndex = slideshowIndex + 1;			else			{				slideshowCount = slideshowCount + 1;				txt.text = slideshowCount;				trace("Slideshow Rotatations:", slideshowCount);				slideshowIndex = 0;			}			trace ("Current slide", slideshowIndex, currentPanel);				if (currentPanel is OverviewModuleController && slideshowIndex == 0)			{				trace ("At overview");				slideshowIndex = 1;				if (currentPanel.overviewUpdating)				{					trace("Waiting to Progress");					currentPanel.addEventListener("OverviewUpdateFinished", progressSlideshow, false, 0, true);				}				else					progressSlideshow();			}			else				progressSlideshow();			if (currentPanel.hasInternalSlideshow)				slideshowTimer.reset();			else				currentPanel.removeEventListener("startInternalSlideshow", startInternalSlideshow);		}				private function progressSlideshow()		{			//Progress Slideshow			if (currentPanel.hasEventListener("OverviewUpdateFinished"))			{				currentPanel.removeEventListener("OverviewUpdateFinished", progressSlideshow);				slideshowTimer.start();			}			trace("Next Slide", slideshowIndex);			mainMenu.menuItemArray[slideshowIndex].dispatchEvent(new MouseEvent(MouseEvent.CLICK));			startSlideshowMonitor();		}		private function startInternalSlideshow(e)		{			currentPanel.removeEventListener("StartInternalSlideshow", startInternalSlideshow);			currentPanel.addEventListener("SubSlideshowDone", slideshowRestart, false, 0, true);			currentPanel.startSlideshow(slideshowSpeed);		}		private function slideshowRestart(e)		{			currentPanel.removeEventListener("SubSlideshowDone", slideshowRestart);			if (slideshowOn)			{				slideshowTimer.start();				slideshowRotate(e)			}		}		/* Full Sceen Mode		--------------------------------------------------*/		private function addFullScreenButton()		{			fullScreenBtn = new Sprite();			var fullScreenLabel:TextField = new TextField();			var fmt:TextFormat = new TextFormat("Gotham Narrow Medium", 14, 0xFFFFFF);						fullScreenLabel.defaultTextFormat 	= 	fmt;			fullScreenLabel.embedFonts			= 	true;			fullScreenLabel.text				=	"FULLSCREEN";			fullScreenLabel.selectable			=	false;			fullScreenLabel.autoSize			= 	"left";			fullScreenLabel.antiAliasType		=	AntiAliasType.ADVANCED;						fullScreenBtn.graphics.beginFill(0xfffffff, 0.0);			fullScreenBtn.graphics.drawRect(0, 0, fullScreenLabel.width, fullScreenLabel.height);			fullScreenBtn.graphics.endFill();			fullScreenBtn.addEventListener(MouseEvent.MOUSE_UP,handleMouseUp,false,0,true);			fullScreenBtn.addEventListener(MouseEvent.MOUSE_OVER,fsOver,false,0,true);			fullScreenBtn.addChild(fullScreenLabel);			fullScreenBtn.useHandCursor = true;			addChild(fullScreenBtn);			fullScreenBtn.y = 135;			fullScreenBtn.x = 30;			//mainMC.mouseChildren = true;			//mainMC.addEventListener(MouseEvent.MOUSE_UP,handleMouseUp, false, 0, true);		}        protected function handleMouseUp(me:MouseEvent):void        {            if (stage.displayState == StageDisplayState.NORMAL) {                try{					stage.displayState=StageDisplayState.FULL_SCREEN;					removeChild(fullScreenBtn);					fullScreenBtn.removeEventListener(MouseEvent.MOUSE_UP,handleMouseUp);					stage.addEventListener(FullScreenEvent.FULL_SCREEN, resizeDisplay, false, 0, true);                }                catch (e:SecurityError){					txt.text = "An error has occured. please modify the html file to allow fullscreen mode";                    trace("an error has occured. please modify the html file to allow fullscreen mode")                }            }        }		protected function fsOver(e:Event)		{			trace("MOUSE OVER");		}		protected function resizeDisplay(e:FullScreenEvent)		{			stage.removeEventListener(FullScreenEvent.FULL_SCREEN, resizeDisplay);			if (!e.fullScreen)			{				addChild(fullScreenBtn);				fullScreenBtn.addEventListener(MouseEvent.MOUSE_UP,handleMouseUp, false, 0, true);			}		}		public function updateTxt()		{			txt.text += "\nPosted";		}		/*PRE-LOAD CONTENT		-----------------------------------------------*/		public function applySettings()		{			var arrayArray = new Array(new Array());			arrayArray = connector.resultArray;						for (var i in arrayArray[0])			{					switch (arrayArray[0][i].toString())					{						case "debugMode"			:	debug = arrayArray[1][i];														break;						case "overviewDelay" 		:	overviewDelay = arrayArray[1][i];														break;																				case "slideshowSpeed" 		:	slideshowSpeed = arrayArray[1][i];														break;						case "slideshowMode" 		:	AssetCache.slideshowMode = arrayArray[1][i];														break;										case "logoURL" 				:	var assetLoader = new AssetLoader(arrayArray[1][i], displayLogo);														break;						case "refreshSpeed"			:	AssetCache.refreshSpeed = arrayArray[1][i] * 1000;														ref = AssetCache.refreshSpeed;														break;						case "blockMenuForLoad"		:	blockMenu = arrayArray[1][i];														break;						case "slideshowResumeTime" 	: 	slideshowResume = arrayArray[1][i] * 1000;													 	break;						case "hideDayView"			:	AssetCache.hideDayView = arrayArray[1][i];														break;						case "kioskMonitorAPI"		:	setupKioskMonitor(arrayArray[1][i]);														break;						case "allowFullScreenMode"	:	allowFullScreenMode = arrayArray[1][i];														break;						case "fullBannerLogo"		:	fullBannerLogo = arrayArray[1][i];														break;						case "hideHIW"				: 	hideHIW = arrayArray[1][i];														break;											}			}				}		private function loadAssets()		{			if (debug)				{				addChild(txt);				addChild( new Stats() );				txt.x = 100;				txt.autoSize = TextFieldAutoSize.LEFT;				txt.multiline = true;			}			var assetLoader = new AssetLoader("../bin/weather.swf", loadWeatherIcons);			this.connector.getComponentData("LoadAssets", setAssets);		}		private function setupKioskMonitor(kioskAPI:Array)		{			if (kioskAPI != null)			{				if (kioskAPI.length == 2)				KioskMonitor.componentName = kioskAPI[0];				KioskMonitor.functionName = kioskAPI[1];				trace("KIOSK API LOADED", KioskMonitor.componentName+"."+KioskMonitor.functionName);			}									KioskMonitor.kioskID = ExternalInterface.call("readCookie",'locus-kiosk-monitor');			trace("Kiosk ID " + KioskMonitor.kioskID + " retrieved from external interface");			KioskMonitor.url = ExternalInterface.call("window.location.href.toString");			trace("Kiosk Location " + KioskMonitor.url + " retrieved from external interface");			KioskMonitor.fullscreenMode = stage.displayState;						if( KioskMonitor.url == null)				KioskMonitor.url = "none";			if (KioskMonitor.kioskID == null)			{				txt.text += "No ID. ";				KioskMonitor.kioskID = 'none';			}			else			{				txt.text += "ID: "+ KioskMonitor.kioskID;			}			txt.text += "\nFS-Mode: " + stage.displayState;			connector.addEventListener("API Called", apiStatus);			connector.addEventListener("API Success", apiStatus);			connector.addEventListener("API Fail", apiStatus);			connector.addEventListener("ConnectorFault", getFaults);		}		private function apiStatus(e:Event)		{			var date:Date = new Date();			txt.text = "ID: " + KioskMonitor.kioskID + "\nFS-Mode: " + KioskMonitor.fullscreenMode + "\nStatus: " + e.type + " @ " + date.getHours().toString() + ":" + date.getMinutes().toPrecision(2) + ":" + date.getSeconds().toPrecision(2) + faults;		}		private function getFaults(e)		{			faults += "\nFault: " + e; 		}		private function setAssets()		{			loadAssetArray = new LoadAssetArray();			if (debug)				preloadText.appendText("\n" + connector.resultArray[0][0].toString());			var resName = connector.resultArray[0][0].toString();			var result = connector.resultArray[1][0];			var assetLoader;			connector.resultArray[0].splice(0,1);			connector.resultArray[1].splice(0,1);						switch (resName)			{				case "pvBuilding"			: 	assetLoader = new AssetLoader(result, loadPV);												break;				case "CustomTabName"		: 	customName = result;												nextAsset(null);												break;												case "HowItWorksSWF"		:	assetLoader = new AssetLoader(result, loadHIW);												break;													case "projectInfoImages" 	:	loadAssetArray = new LoadAssetArray();												AssetCache.projInfoArray = new Array();												loadAssetArray.loadImageArray(result, AssetCache.projInfoArray);												loadAssetArray.addEventListener("ArrayLoaded", nextAsset, false, 0, true);												break;				case "EnvBenefitsImages"	:	loadAssetArray = new LoadAssetArray();												AssetCache.envBenArray = new Array();												loadAssetArray.loadImageArray(result, AssetCache.envBenArray);												loadAssetArray.addEventListener("ArrayLoaded", nextAsset, false, 0, true);													break;												break;						case "LiveDataTitles"		:	AssetCache.liveDataTitles  = result;												trace("First Title", result[1]);												nextAsset(null);												break;						case "LiveDataTypes"		:	AssetCache.liveDataTypes  = result;												nextAsset(null);												break;						case "LiveDataNodes"		:	AssetCache.liveDataNodes  = result;												nextAsset(null);												break;																		case "CustomTab"			:	if (result == null || (result[0][0] == 0 && result.length == 1))												{													customFlag = false;													nextAsset(null);												}												else												{													customFlag = true;													loadCustom(result);												}												break;								case "windSpeedInMetric" :		AssetCache.windSpeedInMetric = result;												nextAsset(null);												break;				case "microinvertersFlag": 		AssetCache.showMicroinverters = result;												nextAsset(null);												break;			}			updatePreloader();		}				public function loadWeatherIcons(asset)		{			var yAdj = 30;			AssetCache.weatherSun = asset.getChildByName("sun_mc");			AssetCache.weatherThermo = asset.getChildByName("thermostat_mc");			AssetCache.weatherWind = asset.getChildByName("wind_mc");			AssetCache.weatherPanel = asset.getChildByName("panelThermostat_mc");		}		private function loadPV(asset)		{			AssetCache.pvImage = asset;			nextAsset(null);		}		private function loadHIW(asset)		{			var HIW = asset;			AssetCache.sunHIW = HIW.getChildByName("sun_mc");			AssetCache.invertersHIW = HIW.getChildByName("inverters_mc");			AssetCache.meterBlockHIW = HIW.getChildByName("meterBlock_mc");			AssetCache.gridHIW = HIW.getChildByName("theGrid_mc");			AssetCache.horizon = HIW.getChildByName("horizon_mc");			AssetCache.microinvertersHIW = HIW.getChildByName("microinverters_mc");						nextAsset(null);		}		private function updatePreloader()		{			//trace("Update Preloader");		}		private function loadCustom(result)		{			var imageURLArray:Array = new Array();			AssetCache.customTitles = new Array();			AssetCache.customImages = new Array();						for (var i in result)			{				AssetCache.customTitles.push (result[i][0])				imageURLArray.push(result[i][1]);				preloadText.appendText("Adding Custom Image " + imageURLArray[i]);			}			loadAssetArray = new LoadAssetArray();			loadAssetArray.loadImageArray(imageURLArray, AssetCache.customImages, preloadText);			loadAssetArray.addEventListener("ArrayLoaded", nextAsset, false, 0, true);					}		private function nextAsset(e)		{			//trace("ResultArray", connector.resultArray[0].length);			if(loadAssetArray.hasEventListener("ArrayLoaded"))				loadAssetArray.removeEventListener("ArrayLoaded", nextAsset)			if (connector.resultArray[0].length > 0)				setAssets();			else			{				if (!preloadRemoved)				{					preloadRemoved = true;					removeChild(preloadText);					Tweener.addTween(spinner,{alpha: 0, time: 1, onComplete:removeSpinner});									 					initialize();				}			}		}		public function removeSpinner()		{			 removeChild(spinner);		}		public function moveMouse(me:MouseEvent)		{			sprite.x = me.stageX;			sprite.y = me.stageY;		}				public function initialize()		{			mainMC = new MovieClip();			mainMenu = new Menu("MAIN", 0);			addChild(mainMC);			loadMainMenu(0);			bg_mc.width = stage.stageWidth;			barTop_mc.width = stage.stageWidth;						addSlideShowButton();			if (allowFullScreenMode)				addFullScreenButton();			mainMenu.menuItemArray[0].dispatchEvent(new MouseEvent(MouseEvent.CLICK));			checkQueryString();			//if (!slideshowMode)			//trace ("Initialized");		}				public function displayLogo(logo)		{			trace("Displaying logo")						if (!fullBannerLogo)			{				if (logo.height > 90)				{					var scale = 90/logo.height;					logo.scaleX = scale;					logo.scaleY = scale;				}				logo.x = stage.stageWidth/2 - logo.width/2;				logo.y = 114/2 - logo.height/2;			}						addChild(logo);			loadAssets();					}		public function onFault(response)		{			trace("Fault in KioskMain", response);		}				public function loadPanel(me:MouseEvent)		{			cleanUp();			//trace("Load Panel", me.currentTarget.obj);			//if (slideshowOn) {stopSlideshow(me);}			var cRef:Class = getDefinitionByName(me.currentTarget.obj as String) as Class;			currentPanel = new cRef(this.connector);			if (slideshowOn)			{				trace("Listening for Internal Slideshow");				currentPanel.addEventListener("startInternalSlideshow", startInternalSlideshow, false, 0, true);			}			trace("Current Panel set to",currentPanel);			mainMC.addChild(currentPanel);						//Scaling to 16:9			if(currentPanel.toString() != '[object OverviewModuleController]')				currentPanel.x = 71;			loadMainMenu(me.currentTarget.index);						currentPanel.addEventListener("TabDataLoaded", panelLoadMonitor, false, 0, true);						if (blockMenu)				mainMenu.mouseChildren = false;			trace("MouseChildren:",mainMenu.mouseChildren);		}		public function panelLoadMonitor(e)		{			currentPanel.removeEventListener("TabDataLoaded", panelLoadMonitor);						if (blockMenu)				mainMenu.mouseChildren = true;		}		public function loadMainMenu(index) 		{			trace("Load Main Menu")			mainMenu = new Menu("MAIN", index);			mainMenu.addMenuItem("OVERVIEW","","com.locusenergy.panels.OverviewModuleController");			mainMenu.addMenuItem("PROJECT INFORMATION","","com.locusenergy.panels.ProjectInfoPanel");			mainMenu.addMenuItem("LIVE DATA","","com.locusenergy.panels.LiveDataPanel");						if(!hideHIW)				mainMenu.addMenuItem("HOW IT WORKS","","com.locusenergy.panels.HowItWorksPanel");						if (customFlag) mainMenu.addMenuItem(customName,"","com.locusenergy.panels.CustomPanel");						addMenuEventHandlers();			mainMC.addChild(mainMenu);			mainMenu.x = stage.stageWidth/2 - mainMenu.width/2;			mainMenu.y = 113;		}				//Cleanup Sprites and Event Handlers to prevent mem leaks		public function cleanUp()		{			removeMenuEventHandlers();			removeAllChildren();		}		public function addMenuEventHandlers()		{			for(var i = 0; i < mainMenu.menuItemArray.length; i++)			{				mainMenu.menuItemArray[i].index = i;				mainMenu.menuItemArray[i].addEventListener(MouseEvent.CLICK, loadPanel);			}		}		public function removeMenuEventHandlers()		{			for(var i = 0; i < mainMenu.menuItemArray.length; i++)				mainMenu.menuItemArray[i].removeEventListener(MouseEvent.CLICK, loadPanel);		}		public function removeAllChildren()		{			while (mainMC.numChildren) {								var child = (mainMC as Object);				//trace("Cleaning", (mainMC as Object).getChildAt(0));				child.getChildAt(0).cleanUp();				//trace("Removing Child:",(mainMC as Object).getChildAt(0))			    mainMC.removeChildAt(0);			}		}	}	}