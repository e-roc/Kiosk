package com.locusenergy.panels {		import com.locusenergy.AssetLoader;	import com.locusenergy.AssetCache;	import com.locusenergy.Connector;	import com.locusenergy.meters.MeterOutput;	import flash.events.Event;	import flash.text.TextField;	import flash.text.TextFormat;	import flash.text.AntiAliasType;	import flash.net.Responder;	import flash.display.Sprite;		public class CurrentWeatherPanel extends Panel{				// Constants:		// Public Properties:		// Private Properties:		private var irradianceOutput;		private var windSpeedOutput;		private var panelTempOutput;		private var ambientTempOutput;		private var irradiance;		private var windSpeed;		private var ambientTemp;		private var panelTemp;		private var irradianceLabel;		private var windSpeedLabel;		private var ambientTempLabel;		private var panelTempLabel;		private var sun:Sprite;		private var wind:Sprite;		private var thermo:Sprite;		private var panelThermo:Sprite;		private var show;		private var componentName;		private var container:Sprite;		// Initialization:		public function CurrentWeatherPanel(connector, nodes = null) 		{			show = "full";			container = new Sprite();			componentName = "CurrentWeather";			displayChart();			setupReadout();			this.connector = connector;			this.connector.getComponentData(componentName, loadWeatherData);		}		private function loadWeatherData()		{			for (var i in connector.resultArray[0])			{					switch (connector.resultArray[0][i].toString())					{						case "irradiance" 		:	irradianceOutput.updateMeter((connector.resultArray[1][i]));														break;						case "windSpeed" 		:	windSpeedOutput.updateMeter(connector.resultArray[1][i]);														break;						case "ambientTemp" 		:	ambientTempOutput.updateMeter(connector.resultArray[1][i]);														break;										case "panelTemp" 		:	panelTempOutput.updateMeter(connector.resultArray[1][i]);														break;						}			}			dispatchEvent(new Event("DataLoaded"));		}		public function displayChart()		{			var yAdj = 30;			sun = AssetCache.weatherSun;			thermo = AssetCache.weatherThermo;			wind = AssetCache.weatherWind;			panelThermo = AssetCache.weatherPanel;			sun.y = 70.15 + yAdj;			wind.y = 161 + yAdj;			thermo.y = 70.15 + yAdj;			panelThermo.y = 161 + yAdj;						if (show == "full")			{				container.addChild(sun);				container.addChild(panelThermo);			}			else			{				yAdj = 140				wind.y = yAdj;				thermo.y = yAdj;			}			container.addChild(wind);			container.addChild(thermo);								}		public function setupReadout()		{			//var textFormat:TextFormat = new TextFormat("Light", 12, 0xffffff);			var vertSpacing = 100;			var col1XPos = -15;			var col2XPos = col1XPos + 300;			var startY = 70;						irradianceLabel = "IRRADIANCE";			windSpeedLabel = "WIND SPEED";				ambientTempLabel = "AMBIENT TEMP";			panelTempLabel = "CELL TEMP";						irradianceOutput = new MeterOutput(irradianceLabel,"W/m2",false,0);			if (AssetCache.windSpeedInMetric)				windSpeedOutput = new MeterOutput(windSpeedLabel, "m/s", false,1);			else				windSpeedOutput = new MeterOutput(windSpeedLabel, "mph", false,1);			ambientTempOutput = new MeterOutput(ambientTempLabel,"F", false,1);			panelTempOutput = new MeterOutput(panelTempLabel, "F", false,1);						irradianceOutput.y = startY;			irradianceOutput.x = col1XPos;			windSpeedOutput.y = irradianceOutput.y + vertSpacing;			windSpeedOutput.x = col1XPos;								ambientTempOutput.y = startY;				ambientTempOutput.x = col2XPos;			panelTempOutput.y = windSpeedOutput.y;			panelTempOutput.x = col2XPos;						if (show == "full")			{				container.addChild(irradianceOutput);				container.addChild(panelTempOutput);				drawCrossLines();							}			else			{				var yAdj = 100;				ambientTempOutput.y = yAdj;				windSpeedOutput.y = yAdj;				drawVertLine();			}			container.addChild(windSpeedOutput);			container.addChild(ambientTempOutput);							addChild(container);			var scale = 1.8;			container.scaleX = scale;			container.scaleY = scale;			container.x = 120;			container.y = -100;			poll();		}		override protected function liveUpdate(e)		{			connector.getComponentData(componentName, loadWeatherData);		}		private function drawCrossLines()		{			var horizLineYPos = 155;			var lineSpacing = 20;			var lines:Sprite = new Sprite();			lines.graphics.lineStyle(1, 0xFFFFFF, 0.2);			lines.graphics.moveTo(lineSpacing, horizLineYPos);			lines.graphics.lineTo(container.width/2 - lineSpacing, horizLineYPos);				lines.graphics.moveTo(container.width/2 + lineSpacing, horizLineYPos);			lines.graphics.lineTo(container.width - lineSpacing, horizLineYPos);					lines.graphics.moveTo(container.width/2, 72 );			lines.graphics.lineTo(container.width/2, horizLineYPos - lineSpacing);				lines.graphics.moveTo(container.width/2, horizLineYPos + lineSpacing);			lines.graphics.lineTo(container.width/2, horizLineYPos + 85);							container.addChild(lines);			lines.x = 50;		}		private function drawVertLine()		{			container.graphics.lineStyle(1, 0xFFFFFF, 0.2);			container.graphics.moveTo(this.width/2, 100 );			container.graphics.lineTo(this.width/2, 165);		}		override public function cleanUp()		{			connector.cleanUp();			cleanUpTimer();		}	}}