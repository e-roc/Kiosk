package com.locusenergy.panels {		import flash.display.*;	import flash.events.*;	import com.locusenergy.meters.*;	import com.locusenergy.Connector;	import flash.net.*;		public class CurrentLoadGenPanel extends Panel{				// Constants:		// Public Properties:		public var componentPath;		public var currentGenComponentName;		public var currentGencurrentLoadFunc;		public var currentGenMaxValueFunc;		public var currentGenloadToDateFunc;		public var maxValue;		//Load  Variables		public var currentLoad;		public var loadToDate;		//Gen Variables		public var instPower;		public var powerGen;		public var recentGen;		// Private Properties:		private var analogMeter:Meter;		private var digitalMeter:Meter;		private var digitalMeter2:ModuleMeterDigital;		private var yPos:Number;		private var connection:NetConnection;		private var gateway;			private var componentName;		private var recentGenTitle:String;		public var suppressMeters:Boolean = false;		//private var grid:Grid;		// Initialization:		public function CurrentLoadGenPanel(connector, type, nodes) 		{ 			componentName = type;			this.connector = connector;			this.paramArray = new Array();			paramArray["nodes"] = nodes;			loadMeters();			triggerData(null);		}		private function triggerData(e)		{			trace("LoadGen Meters Connector Call");			this.connector.getComponentData(componentName, loadMeterData, this.paramArray);		}		private function loadMeterData()		{			for (var i in connector.resultArray[0])			{				trace('meter results for ', connector.resultArray[0][i], ':', connector.resultArray[1][i]);					switch (connector.resultArray[0][i].toString())					{						case "maxValue" 	:	maxValue = connector.resultArray[1][i];												if (!suppressMeters)													{(analogMeter as AnalogMeter).setMax(maxValue);}												break;						case "currentLoad" 	:	currentLoad = connector.resultArray[1][i];												break;						case "loadToDate"	:	loadToDate = connector.resultArray[1][i];												break;						case "powerGen" 	:	powerGen = connector.resultArray[1][i];												break;								case "recentGen"	:	recentGen = connector.resultArray[1][i];												break;						case "recentGenTitle":	recentGenTitle = connector.resultArray[1][i];												digitalMeter2.updateTitle(recentGenTitle);												break;											case "instPower"	:	instPower = connector.resultArray[1][i];												break;						case "nodes"		:	trace("Nodes set to", connector.resultArray[1][i]);												break;					}			}			trace("LoadGen: dispatching loaded");			dispatchEvent(new Event("DataLoaded"));			updateMeters();		}		public function loadMeters()		{			yPos = -230;			var xPos = 280;			var scale = 1.5;			var spacer = 250;						if (componentName != "RecentGeneration")			{				analogMeter = new ModuleMeterAnalog();				analogMeter.scaleX = scale;				analogMeter.scaleY = scale;				analogMeter.y = yPos;				analogMeter.x = xPos + spacer;				addChild(analogMeter);			}			else			{				digitalMeter2 = new ModuleMeterDigital(0.0, "test");				digitalMeter2.scaleX = scale;				digitalMeter2.scaleY = scale;				digitalMeter2.y = yPos;				digitalMeter2.x = xPos + spacer;							addChild(digitalMeter2);							}						digitalMeter = new ModuleMeterDigital();			digitalMeter.scaleX = scale;			digitalMeter.scaleY = scale;						digitalMeter.y = yPos + 200;			digitalMeter.x = xPos;			addChild(digitalMeter);						if (timerInterval < Meter.MAX_TIME*1000)				timerInterval = Meter.MAX_TIME*1000;			poll();		}		override protected function liveUpdate(e)		{			trace("Live Update");			connector.getComponentData(componentName, loadMeterData, this.paramArray);		}		private function updateMeters()		{			dispatchEvent(new Event("ModuleUpdated"));			if (!suppressMeters)			{				var analogReading;				var digitalReading;				var digitalReading2;				if (componentName == "CurrentLoad")				{					analogReading = currentLoad;					digitalReading = loadToDate;				}				else if (componentName == "CurrentGeneration")				{					analogReading = instPower;					digitalReading = powerGen;				}				else if (componentName == "RecentGeneration")				{					digitalReading2 = recentGen;					digitalReading = powerGen;				}								if (componentName != "RecentGeneration")					analogMeter.setMeterReading(analogReading);				else					digitalMeter2.setMeterReading(digitalReading2);				digitalMeter.setMeterReading(digitalReading);			}					}		override protected function removeAdditionalEventHandlers()		{			trace("Cleaning Current Generation Module");			if (analogMeter != null)				this.analogMeter.cleanUp();			if (digitalMeter != null && digitalMeter.hasEventListener("MeterLoaded"))					digitalMeter.removeEventListener("MeterLoaded", triggerData);				if (digitalMeter != null)					this.digitalMeter.cleanUp();			if (digitalMeter2 != null)					this.digitalMeter2.cleanUp();								if (connector != null)				connector.cleanUp();			removeAllChildren();					}		// Protected Methods:	}	}