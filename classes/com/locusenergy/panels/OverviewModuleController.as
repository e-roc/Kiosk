package com.locusenergy.panels {		import flash.display.MovieClip;	import flash.events.Event;	import flash.net.*;	import com.locusenergy.modules.*;	import com.locusenergy.Connector;	import com.locusenergy.KioskMonitor;		public class OverviewModuleController extends Panel {				// Constants:		// Public Properties:				// Private Properties:		var moduleArray:Array;		var loadedModuleArray:Array;		var moduleTypeArray:Array;		var moduleNameArray:Array;		var topLeft:Number = 41;		var topRight:Number = 41;		var h:Number = 0;		var kioskModule;		var index = 0;				public var overviewUpdating:Boolean = false;				// Initialization:		public function OverviewModuleController(connector) { 			hasInternalSlideshow = false;			this.connector = connector;			getLayout();		}		public function getLayout()		{			topLeft = 41;			topRight = 41;			var layoutResponder=new Responder(loadLayout,connector.onFault);						connector.connection.call(connector.componentPath + "." + "OverviewModuleLayout"+ ".getModulesArray", layoutResponder);		}		public function loadLayout(response)		{			moduleArray = response;			loadedModuleArray = new Array();			moduleTypeArray = new Array();			moduleNameArray = new Array();			for (var i=0; i < moduleArray.length; i++)			{				moduleTypeArray.push(moduleArray[i][0]);				moduleNameArray.push(moduleArray[i][1]);			}			index = 0;			loadModules();		}		public function loadModules()		{			//kioskModule = moduleArray[0] as KioskModule;			setModuleType(index);			loadedModuleArray.push(kioskModule);			//Setting Height based on Sizes			this.setModuleSize(index);			this.setModulePosition(index);			index++;					}		private function loadModuleData(e)		{			if (kioskModule.hasEventListener("StartDataLoad"))	kioskModule.removeEventListener("StartDataLoad", loadModuleData);						kioskModule.displayModule();			addChild(kioskModule);			//trace("ADDING", kioskModule, kioskModule.alpha, kioskModule.x);						moduleArray.splice(0,1);			if (kioskModule.name != "Empty")			{				kioskModule.addEventListener("DataLoaded", loadNextModule, false, 0, true);				kioskModule.getModuleData(connector);			}			else			{				loadNextModule(null);			}		}		private function loadNextModule(e)		{			trace ("DataLoaded for", moduleArray[0], moduleArray.length);			kioskModule.removeEventListener("DataLoaded", loadNextModule);			if (moduleArray.length > 0)				loadModules()			else			{				reportStatus();				dispatchEvent(new Event("TabDataLoaded"));				poll();			}		}		private function reportStatus()		{			KioskMonitor.fullscreenMode = stage.displayState;			KioskMonitor.reportStatus();		}		override protected function liveUpdate(e)		{			timer.reset();			timer.start();			overviewUpdating = true;			for (var i in loadedModuleArray)			{				moduleArray.push(loadedModuleArray[i]);			}			startUpdate();		}		private function startUpdate()		{			//trace("START UPDATE",moduleArray[0],"KIOSK MODULE",kioskModule);			kioskModule = moduleArray[0] as KioskModule;			moduleArray.splice(0,1);						kioskModule.addEventListener("ModuleUpdated", updateNext, false, 0, 1);			kioskModule.liveUpdate(null);		}		private function updateNext(e)		{			kioskModule.removeEventListener("ModuleUpdated", updateNext);			if (moduleArray.length > 0)			{				startUpdate();			}			else			{				reportStatus();				overviewUpdating = false;				dispatchEvent(new Event("OverviewUpdateFinished"));				timer.start();			}		}		private function setModuleType(i)		{			var panelsPath = "com.locusenergy.panels.";			switch (String(moduleTypeArray[i]))			{				case "CurrentGeneration": 								kioskModule = new CurrentLoadGenModule("CurrentGeneration");							checkDelayLoadFlag(kioskModule);							kioskModule.setTitle("Current Generation");							setModuleSize("large");							break;				case "CurrentLoad": 								kioskModule = new CurrentLoadGenModule("CurrentLoad");							checkDelayLoadFlag(kioskModule);							kioskModule.setTitle("Current Load");							setModuleSize("large");							break;					case "RecentGeneration": 								kioskModule = new CurrentLoadGenModule("RecentGeneration");							checkDelayLoadFlag(kioskModule);							kioskModule.setTitle("Recent Generation");							setModuleSize("large");							break;								case "CurrentWeatherHalf": 								kioskModule = new CurrentWeatherModule("half");							checkDelayLoadFlag(kioskModule);							kioskModule.setTitle("Current Weather");							setModuleSize("large");							break;				case "CurrentWeatherFull": 								kioskModule = new CurrentWeatherModule("full");							checkDelayLoadFlag(kioskModule);							kioskModule.setTitle("Current Weather");							setModuleSize("large");							break;										case "EnvironmentalBenefitsLarge": 								kioskModule = new EnvironmentalBenefitsModule("large");							checkDelayLoadFlag(kioskModule);							kioskModule.setTitle("Environmental Benefits");							setModuleSize("large");							break;				case "EnvironmentalBenefitsSmall": 								kioskModule = new EnvironmentalBenefitsModule("small");							checkDelayLoadFlag(kioskModule);							kioskModule.setTitle("Environmental Benefits");							setModuleSize("small");							break;													case "LiveDataConsVsProd": 								kioskModule = new PanelToModule(panelsPath + "LiveDataConsVsProd");							checkDelayLoadFlag(kioskModule);							kioskModule.setTitle("Consumption vs Production");							setModuleSize("large");							break;				case "LiveDataConsumption": 								kioskModule = new PanelToModule(panelsPath + "LiveDataConsumption");							checkDelayLoadFlag(kioskModule);							kioskModule.setTitle("Total Consumption");							setModuleSize("large");							break;											case "LiveDataGeneration": 								kioskModule = new PanelToModule(panelsPath + "LiveDataGeneration");							checkDelayLoadFlag(kioskModule);							kioskModule.setTitle("Total Generation");							setModuleSize("large");							break;				case "LiveDataStringLevel": 								kioskModule = new PanelToModule(panelsPath + "LiveDataStringLevel");							checkDelayLoadFlag(kioskModule);							kioskModule.setTitle("String Level");							setModuleSize("large");							break;																case "MoneySaved": 								kioskModule = new MoneySavedModule();							checkDelayLoadFlag(kioskModule);							kioskModule.setTitle("Money Being Saved");							setModuleSize("small");							break;				case "NetMeterStatus": 								kioskModule = new NetMeterStatusModule();							checkDelayLoadFlag(kioskModule);							kioskModule.setTitle("Net Meter Status");							setModuleSize("large");							break;										case "News": 								kioskModule = new NewsModule();							checkDelayLoadFlag(kioskModule);							kioskModule.setTitle("News");							setModuleSize("small");							break;												case "PerformanceYield": 								kioskModule = new PerformanceYieldModule();							checkDelayLoadFlag(kioskModule);							kioskModule.setTitle("Performance Yield");							setModuleSize("small");							break;						case "SystemSummary": 								kioskModule = new SystemSummaryModule();							checkDelayLoadFlag(kioskModule);							kioskModule.setTitle("System Summary");							setModuleSize("small");							break;					default :								kioskModule = new KioskModule();							checkDelayLoadFlag(kioskModule);							kioskModule.name = "Empty";							kioskModule.setTitle("");							setModuleSize("small");							break;			}			if (moduleNameArray[i] && moduleNameArray[i] != "" && kioskModule.name != "Empty")				kioskModule.setTitle(moduleNameArray[i]);							kioskModule.loadModule();			if (!kioskModule.delayLoad)			{				loadModuleData(null);			}		}		private function checkDelayLoadFlag(kioskModule)		{			if (kioskModule.delayLoad)			{				kioskModule.addEventListener("StartDataLoad", loadModuleData, false, 0, true);			}		}		private function setModuleSize(size)		{			if (size  == "small")			{				h = 230;				kioskModule.setHeight(h);			}			else if (size == "large")			{				h = 285;				kioskModule.setHeight(h);									}		}		private function setModulePosition(i)		{			var vertSpacing = 35;			var horizSpacing = 30;			if (i < 2)			{				kioskModule.setPosition (stage.stageWidth/2-kioskModule.moduleWidth-horizSpacing/2, topLeft);				topLeft = topLeft + h + vertSpacing;											}			else			{				kioskModule.setPosition (stage.stageWidth/2+horizSpacing/2, topRight);				topRight = topRight + h + vertSpacing;			}		}		override public function cleanUp()		{			trace ("Cleaning up Overview Module");			cleanUpTimer();			for each(var module in loadedModuleArray)			{				if (module.hasEventListener("DataLoaded"))	module.removeEventListener("DataLoaded", loadNextModule);				if (module.hasEventListener("ModuleUpdated"))	module.removeEventListener("ModuleUpdated", updateNext);				if (module.hasEventListener("StartDataLoad"))	module.removeEventListener("StartDataLoad", loadModuleData);				module.cleanUp();			}			removeAllChildren();		}	}	}