package com.locusenergy.panels {		import com.locusenergy.meters.MeterOutput;	import com.locusenergy.Connector;	import com.locusenergy.AssetLoader;	import com.locusenergy.AssetCache;	import com.locusenergy.menus.*;	import flash.display.Sprite;	import flash.display.Bitmap;	import flash.display.BitmapData;	import flash.events.MouseEvent;	import flash.events.Event;	import flash.events.EventDispatcher;		public class EnvironmentalBenefitsPanel extends Panel{				// Constants:		// Public Properties:		//private var meterOutputs:Array = new Array();		private var titles:Array = new Array();		private var units:Array = new Array();		private var values:Array = new Array();		private var imageURLs:Array = new Array();		private var spacing = 190;		private var imageXPos = 50;		private var size:String;		private var container:Sprite;		private var assetsLoaded = 0;		private var imageContainer:Sprite = new Sprite();		private var componentName;		private var type;		// Private Properties:			// Initialization:		public function EnvironmentalBenefitsPanel(connector, nodes = null) 		{			componentName =  "EnvironmentalBenefits";			if (AssetCache.slideshowMode == 0)				this.hasInternalSlideshow = true;			this.size = size;			this.type = "Day";			paramArray["timeseries"] = type;			paramArray["nodes"] = nodes;			this.connector = connector;			connector.getComponentData(componentName, loadBenefits, paramArray);			loadSideMenu(0);		}		private function loadBenefits()		{			for (var i in connector.resultArray[0])			{				trace(connector.resultArray[1][i]);				switch (connector.resultArray[0][i].toString())				{					case "titles" 			:	titles = connector.resultArray[1][i];												break;					case "units" 			:	units = connector.resultArray[1][i];												break;					case "values" 			:	values = connector.resultArray[1][i];												break;							case "nodes"			:	trace("Nodes set to", connector.resultArray[1][i]);													break;								}			}			dispatchEvent(new Event("DataLoaded"));			if (container == null)				displayEnvBen();			else				updateEnvBen()		}		private function updateEnvBen()		{			for (var i in titles)			{				if (container.getChildByName("meterOutput"+i) != null)					(container.getChildByName("meterOutput"+i) as MeterOutput).updateMeter(values[i]);			}		}		private function displayEnvBen()		{			container = new Sprite();			var textYPos = 150;			var xStartPos = 0;			for (var i in titles)			{				var meterOutput:MeterOutput;				meterOutput = new MeterOutput(titles[i], units[i], false, 2);				meterOutput.name = "meterOutput"+i;				meterOutput.updateMeter(values[i]);				meterOutput.x = xStartPos;				meterOutput.y = textYPos;								container.addChild(meterOutput);				xStartPos += spacing;			}			placeImages();			container.addChild(imageContainer);			addChild(container);			container.y = -50;			container.x = 170;			var scale = 1.4;			container.scaleX = scale;			container.scaleY = scale;			poll();		}		override protected function liveUpdate(e)		{			connector.getComponentData(componentName, loadBenefits, paramArray);		}		private function placeImages()		{			var imageYPos = 70;			for each (var img in AssetCache.envBenArray)			{				trace(img);				addChild(img);				img.x = imageXPos;				img.y = imageYPos;				imageContainer.addChild(img);				imageXPos += spacing			}		}		private function loadSideMenu(i) {			sideMenu=new Menu("SIDE",i);			if (!AssetCache.hideDayView)				sideMenu.addMenuItem("DAY","","Day");			sideMenu.addMenuItem("WEEK","","Week");			sideMenu.addMenuItem("MONTH","","Month");			sideMenu.addMenuItem("YEAR","","Year");			sideMenu.addMenuItem("LIFE","","Life");			for (var i = 0; i < sideMenu.menuItemArray.length; i++) {				sideMenu.menuItemArray[i].index=i;				sideMenu.menuItemArray[i].addEventListener(MouseEvent.CLICK, clickEvent,false, 0, true);			}			sideMenu.y=-30;			sideMenu.x=1040;			dispatchEvent(new Event("SideMenuLoadedEvent"));			addChild(sideMenu);		}		private function clickEvent(me:MouseEvent) {			if (sideMenu != null)	removeSideMenu();			loadSideMenu(me.currentTarget.index);			type = me.currentTarget.obj;			paramArray["timeseries"] = type;			connector.getComponentData(componentName, loadBenefits, paramArray);		}				protected function removeSideMenu()		{			for (var i = 0; i < sideMenu.menuItemArray.length; i++) {				sideMenu.menuItemArray[i].index=i;				sideMenu.menuItemArray[i].removeEventListener(MouseEvent.CLICK, clickEvent);			}			removeChild(sideMenu);		}		protected function clearPanel() {			if (sideMenu != null)				removeSideMenu();			if (container != null)				removeChild(container);		}		override protected function removeAdditionalEventHandlers()		{			connector.cleanUp();			cleanUpTimer();		}		override protected function slideshowRotate(e)		{			slideshowIndex = slideshowIndex + 1;			if (slideshowIndex < sideMenu.menuItemArray.length)			{				sideMenu.menuItemArray[slideshowIndex].dispatchEvent(new MouseEvent(MouseEvent.CLICK));			}			else			{				stopSlideshow(e);				dispatchEvent(new Event("SubSlideshowDone"));			}		}			}	}