package com.locusenergy.panels{	import flash.display.Sprite;	import flash.events.*;	import flash.net.*;	import com.locusenergy.Connector;	import com.locusenergy.charts.*;	import com.locusenergy.menus.*;	import com.locusenergy.AssetCache;	public class DataPanel extends Panel {		// Constants:		// Public Properties:		public var chartX;		public var chartY;		public var chartHeight = 350;		public var chartWidth = 790;		public var lineChartWidthDiff = 100;		public var lineChartHeightDiff = 50;		public var menuWidthDiff = 0;		public var type;		public var componentPath;		public var componentName;		public var category;		public var chart:ChartGenerator;		public var readingsArray:Array;		public var color:Array;		public var xTitle:String = new String();;		public var yTitle:String = new String();;		public var y2Title:String = new String();		public var legend:Array;		public var maxX;		public var maxY;		public var maxY2;		public var minY;		public var numLines;		public var totalStr = "generation";				private var total:Number;		private var lifeTimeseries;		private var msg;		private var vertTicks = 10;		// Private Properties:		private var connection:NetConnection;		protected var loadChartFunc:Function;		protected var sideMenuOff:Boolean = false;		// Initialization:		public function DataPanel() {			if (AssetCache.slideshowMode == 0)				hasInternalSlideshow = true;			legend = new Array();			chartY= 0;			chartX=200;			minY = 0;			if (!AssetCache.hideDayView)				type="Day";			else				type="Week";			loadSideMenu(0);								}/*		public function gatewayConnect(e)		{			connector.connectToGateway();		}*/		public function clearPanel() {						if (sideMenu != null)				removeSideMenu()			while (this.numChildren) {				this.removeChildAt(0);			}		}		override protected function removeAdditionalEventHandlers()		{			if (connector.hasEventListener("ComponentDataLoaded"))			{				connector.removeEventListener("ComponentDataLoaded", loadChartData);			}			if (chart != null)	chart.cleanUp();		}		public function clickEvent(me:MouseEvent) {			trace("Sidemenu Clicked");			clearPanel();			loadSideMenu(me.currentTarget.index);			type = me.currentTarget.obj;			paramArray["timeseries"] = type;			connector.getComponentData(componentName, loadChartData, paramArray);		}		public function loadSideMenu(i) {			sideMenu=new Menu("SIDE",i);			if (!AssetCache.hideDayView)				sideMenu.addMenuItem("DAY","","Day");			sideMenu.addMenuItem("WEEK","","Week");			sideMenu.addMenuItem("MONTH","","Month");			sideMenu.addMenuItem("YEAR","","Year");			sideMenu.addMenuItem("LIFE","","Life");			for (var i = 0; i < sideMenu.menuItemArray.length; i++) {				sideMenu.menuItemArray[i].index=i;				sideMenu.menuItemArray[i].addEventListener(MouseEvent.CLICK, clickEvent);			}			sideMenu.x=1040;			sideMenu.y=chartY;			dispatchEvent(new Event("SideMenuLoadedEvent"));			addChild(sideMenu);			}						public function loadChartData(e = null)		{			//var connector.resultArray:Array = new Array(new Array());			//connector.resultArray = connector.resultArray;						//trace("---------Chart Data----------")			for (var i in connector.resultArray[0])			{					switch (connector.resultArray[0][i].toString())					{						case "maxX-Value" 		:	maxX = connector.resultArray[1][i];													break;						case "maxY-Value"		:	maxY = connector.resultArray[1][i];													break;						case "maxY2-Value"		:	maxY2 = connector.resultArray[1][i];													break;																		case "minY-Value"		:	if (connector.resultArray[1][i] != null) minY = connector.resultArray[1][i];													break;																								case "x-AxisTitle" 		:	xTitle = connector.resultArray[1][i];													break;											case "y-AxisTitle"		:	yTitle = connector.resultArray[1][i];													break;						case "y-Axis2Title"		:	if (connector.resultArray[1][i] != null) y2Title = connector.resultArray[1][i];													break;													case "readings"			:	readingsArray = connector.resultArray[1][i];													break;							case "legendTitles"		:	if (connector.resultArray[1][i] != null) legend = connector.resultArray[1][i];													break;							case "lifeTimeseries"	:	if (connector.resultArray[1][i] != null && connector.resultArray[1][i] != "" ) lifeTimeseries = connector.resultArray[1][i];													break;						case "total"			:	total = connector.resultArray[1][i];													break;						//case "nodes"			:	trace("Nodes set to", connector.resultArray[1][i]);						//							break;						case "customText"		:	msg = connector.resultArray[1][i];													break;						case "vertTicks"		:   if(connector.resultArray[1][i] != null)														vertTicks = connector.resultArray[1][i];													break;										}					//trace(connector.resultArray[0][i],connector.resultArray[1][i]);			}			//trace("-----------------------------");			dispatchEvent(new Event("DataLoaded"));			loadChartFunc();		}				public function loadBarChart() {			if (type=="Day") {				chart=new BarChartGenerator(chartWidth + menuWidthDiff,chartHeight,xTitle, yTitle,maxX,maxY, vertTicks,"hours", total, totalStr, msg);			} else if (type == "Week") {				chart=new BarChartGenerator(chartWidth + menuWidthDiff,chartHeight,xTitle,yTitle,maxX,maxY, vertTicks, "weekdays", total, totalStr, msg);			} else if (type == "Month") {				chart=new BarChartGenerator(chartWidth + menuWidthDiff,chartHeight,xTitle,yTitle,maxX,maxY, vertTicks,"days", total, totalStr, msg);			} else if (type == "Year") {				chart=new BarChartGenerator(chartWidth + menuWidthDiff,chartHeight,xTitle,yTitle,maxX,maxY, vertTicks,"months", total, totalStr, msg);			} else if (type == "Life") {				chart=new BarChartGenerator(chartWidth + menuWidthDiff,chartHeight,xTitle,yTitle,maxX,maxY, vertTicks, lifeTimeseries, total, totalStr, msg);			}			else {				trace("chart input error");			}			chart.x=chartX;			chart.y=chartY;			this.addChild(chart);			dispatchEvent(new Event("ChartAddedEvent"));			//emulate reading points from server			var ptsArray:Array = new Array();			var pt:Pt;			for (var i in readingsArray) {				pt=new Pt(i,readingsArray[i]);				ptsArray.push(pt);			}			chart.setPts(ptsArray);			chart.generateBars();		}		public function loadLineChart()		{			if (type=="Day") {				chart=new LineChartGenerator(chartWidth - lineChartWidthDiff + menuWidthDiff, chartHeight - lineChartHeightDiff, xTitle, yTitle, y2Title, maxX, maxY, maxY2, vertTicks, "hours", minY, total, totalStr, msg);			} else if (type == "Week") {				chart=new LineChartGenerator(chartWidth - lineChartWidthDiff + menuWidthDiff, chartHeight - lineChartHeightDiff, xTitle, yTitle, y2Title, maxX, maxY, maxY2, vertTicks, "weekdays", minY, total, totalStr, msg);			} else if (type == "Month") {				chart=new LineChartGenerator(chartWidth - lineChartWidthDiff + menuWidthDiff, chartHeight - lineChartHeightDiff, xTitle, yTitle, y2Title, maxX, maxY, maxY2, vertTicks, "days", minY, total, totalStr, msg);			} else if (type == "Year") {				chart=new LineChartGenerator(chartWidth - lineChartWidthDiff + menuWidthDiff, chartHeight - lineChartHeightDiff, xTitle, yTitle, y2Title, maxX, maxY, maxY2, vertTicks, "months", minY, total, totalStr, msg);			} else if (type == "Life") {				chart=new LineChartGenerator(chartWidth - lineChartWidthDiff + menuWidthDiff, chartHeight - lineChartHeightDiff, xTitle, yTitle, y2Title, maxX, maxY, maxY2, vertTicks, lifeTimeseries, minY, total, totalStr, msg);			}			else {				trace("chart input error");			}			chart.x=chartX;			chart.y=chartY;			this.addChild(chart);			dispatchEvent(new Event("ChartAddedEvent"));			//emulate reading points from server			chart.setRatios();			var pt:Pt;								for (var i in readingsArray)			{				var ptsArray:Array = new Array();				for (var j in readingsArray[i]) {					pt=new Pt(j,readingsArray[i][j]);					ptsArray.push(pt);				}				chart.setPts(ptsArray);				chart.generateLine(i);			}			chart.generateLegend(legend);				chart.animateLines();		}		override protected function slideshowRotate(e)		{			slideshowIndex = slideshowIndex + 1;			trace("Data Panel SlideshowRotate", slideshowIndex);						if (slideshowIndex < sideMenu.menuItemArray.length)			{				sideMenu.menuItemArray[slideshowIndex].dispatchEvent(new MouseEvent(MouseEvent.CLICK));			}			else			{				stopSlideshow(e);				dispatchEvent(new Event("SubSlideshowDone"));			}		}		protected function removeSideMenu()		{			for (var i = 0; i < sideMenu.menuItemArray.length; i++) {				sideMenu.menuItemArray[i].index=i;				sideMenu.menuItemArray[i].removeEventListener(MouseEvent.CLICK, clickEvent);			}			removeChild(sideMenu);		}	}}