package com.locusenergy.panels {		import flash.events.*;	import flash.display.*;	import flash.net.*;	import com.locusenergy.AssetCache;	import com.locusenergy.AssetLoader;	import com.locusenergy.Connector;	import com.locusenergy.ShadowBox;	import com.locusenergy.LoadAssets;	import flash.geom.Matrix;	import flash.filters.BlurFilter;	import flash.geom.Rectangle;	import caurina.transitions.Tweener;	import caurina.transitions.properties.FilterShortcuts;			public class ProjectInfoPanel extends Panel{				// Constants:		private const setHeight =  508;		private const maxWidth = 766;		private const boxWidth = 380;		private const maxHeight = 460;		// Public Properties:		// Private Properties:		private var pic:Sprite;		private var ff:Sprite;		private var rew:Sprite;		private var assetLoader:AssetLoader;		private var imageURLArray:Array;		private var index;		private var directionFwd:Boolean;		private var imageArray:Array;		private	var posY;		private	var buttonYPos;		private var posX;		private var textSprite;				// Initialization:		public function ProjectInfoPanel(connector) 		{						FilterShortcuts.init();			index = 0;			posY=60;			buttonYPos = posY + setHeight/2;			posX = 470;						this.hasInternalSlideshow = true;			setPicPlacement();			setTextSettings();			setNavButtons();			setImages();						this.connector = connector;			try			{				connector.getComponentData("ProjectInformation", loadData);			}			catch (error:Error)			{				trace("Connection error");			}			internalSSDelay();					}		private function setImages()		{			trace("Loading Cached");			imageArray = AssetCache.projInfoArray;						for each (var asset in imageArray)			{				if (asset != null)				{					var ratio = setHeight/asset.height;					if (ratio * asset.width > maxWidth)					{						ratio = maxWidth/asset.width;					}					asset.width = ratio * asset.width;					asset.height = ratio * asset.height;					asset.y = pic.height/2 - asset.height/2;					asset.x = pic.width/2 - asset.width/2;				}			}						imageArray[0].alpha = 1;			imageArray[0].filters = [];			addPicAndNavListeners();								}		private function setPicPlacement()		{			pic = new Sprite();			pic.graphics.beginFill(0x000000, 0.0);			pic.graphics.drawRect(0,0,maxWidth,setHeight);			pic.graphics.endFill();					pic.x = posX;			pic.y = posY;		}		private function setNavButtons()		{			var radius = 35;			ff = new Sprite();			rew = new Sprite();						var matrix:Matrix = new Matrix();			var alphasArray = new Array(0.7, 0.7);			var ratiosArray = new Array(0,100);			var  colorsArray = new Array(0xBED63A,0x6BA400);//6BA400			var arr0wL:Sprite = new Sprite();			var arr0wR:Sprite = new Sprite();						arr0wL.graphics.lineStyle(3,0xffffff, 1, true, LineScaleMode.NORMAL,CapsStyle.ROUND, JointStyle.ROUND);			arr0wL.graphics.beginFill(0xFFFFFF, 0.95)			arr0wL.graphics.moveTo(0, radius/2);			arr0wL.graphics.lineTo(radius, 0);			arr0wL.graphics.lineTo(radius, radius);			arr0wL.x = -22;			arr0wL.y = -17;			rew.addChild(arr0wL);						arr0wR.graphics.lineStyle(3,0xffffff, 1, true, LineScaleMode.NORMAL,CapsStyle.ROUND, JointStyle.ROUND);			arr0wR.graphics.beginFill(0xFFFFFF, 0.95)			arr0wR.graphics.moveTo(radius, radius/2);			arr0wR.graphics.lineTo(0, radius);			arr0wR.graphics.lineTo(0, 0);			arr0wR.x = -12;			arr0wR.y = -17;			ff.addChild(arr0wR);									matrix.createGradientBox(2*radius, 2*radius,0, -10);			rew.graphics.lineStyle(1,0xFFFFFF,0.7);			rew.graphics.beginGradientFill("linear",colorsArray, alphasArray, ratiosArray, matrix, SpreadMethod.PAD, InterpolationMethod.LINEAR_RGB);			rew.graphics.drawCircle(0,0, radius);			rew.graphics.endFill();			rew.x = posX + 20;			rew.y = buttonYPos;			matrix.createGradientBox(2*radius, 2*radius, Math.PI, -15);			ratiosArray = new Array(150,255);			ff.graphics.lineStyle(1,0xFFFFFF,0.7);			ff.graphics.beginGradientFill("linear",colorsArray, alphasArray, ratiosArray, matrix, SpreadMethod.PAD, InterpolationMethod.LINEAR_RGB);			ff.graphics.drawCircle(0,0,radius);			ff.graphics.endFill();			ff.x = posX + maxWidth - 20;			ff.y = buttonYPos;			addChild(pic);			addChild(ff);			addChild(rew);		}		private function setTextSettings()		{			textSprite = new Sprite();			var gradBoxMask = new Sprite();			var shadowBox = new ShadowBox(boxWidth, 500);						shadowBox.y = 100;			shadowBox.x = 30;			addChild(shadowBox);									titleText.text = "Project Information";			titleText.y = 50;			addChild(titleText);			bodyText.width = boxWidth - 60;			bodyText.htmlText = AssetCache.projectInformation;			textSprite.addChild(bodyText);						var matrix:Matrix = new Matrix();			var alphasArray = new Array(1, 0.0);			var ratiosArray = new Array(150,245);			var  colorsArray = new Array(0xBED63A,0x6BA400);//6BA400			matrix.createGradientBox(boxWidth, maxHeight, Math.PI/2, -15);			gradBoxMask.graphics.beginGradientFill("linear",colorsArray, alphasArray, ratiosArray, matrix, SpreadMethod.PAD, InterpolationMethod.LINEAR_RGB);			gradBoxMask.graphics.drawRect(0,0, boxWidth, maxHeight);						gradBoxMask.cacheAsBitmap = true;			textSprite.cacheAsBitmap = true;						gradBoxMask.x = 30;			gradBoxMask.y = 100;			textSprite.mask = gradBoxMask;			addChild(gradBoxMask);						addChild(textSprite);			textSprite.addEventListener(MouseEvent.MOUSE_DOWN, startDragging, false, 0, true);			textSprite.addEventListener(MouseEvent.MOUSE_UP, stopDragging, false, 0, true);				}		private function startDragging(me:MouseEvent)		{			var bounds:Rectangle = new Rectangle(0,-1*bodyText.height + maxHeight/2,0, bodyText.height - maxHeight/2);			me.currentTarget.startDrag(false, bounds);					}		private function stopDragging(me:MouseEvent)		{			me.currentTarget.stopDrag();		}		public function loadData()		{			var resultArray = new Array(new Array());			resultArray  = connector.resultArray;			for (var i in resultArray)			{				switch (resultArray[0][i])				{					case "description":		bodyText.htmlText = "<p>" + resultArray[1][i] +"</p>";											AssetCache.projectInformation = "<p>" + resultArray[1][i] +"</p>";											break;				}							}			dispatchEvent(new Event("TabDataLoaded"));		}				private function addPicAndNavListeners()		{			pic.addChild(imageArray[0]);			ff.addEventListener(MouseEvent.CLICK, forwardButtonClick, false, 0, true);			rew.addEventListener(MouseEvent.CLICK, backButtonClick, false, 0, true);		}		override protected function slideshowRotate(e)		{			slideshowIndex = slideshowIndex + 1;			if (slideshowIndex < imageArray.length)			{				if (slideshowIndex > 0)	forwardButtonClick(null);			}			else			{				stopSlideshow(e);				trace("SlideshowDone");				dispatchEvent(new Event("SubSlideshowDone"));			}		}		//Image Navigation		public function backButtonClick(me:MouseEvent)		{			directionFwd = false;			var index0 = index;			index = index - 1;			if (index < 0)			{				index = imageArray.length - 1;			}			animateImageSwitch(imageArray[index0], imageArray[index]);		}		public function forwardButtonClick(me:MouseEvent)		{			directionFwd = true;			var index0 = index;			index = index + 1;			if (index > imageArray.length -1)			{				index = 0;			}			animateImageSwitch(imageArray[index0], imageArray[index]);		}		public function animateImageSwitch(sp1, sp2)		{			var t = 2;			var blurFilterOn = new BlurFilter(10,10,3);			var blurFilterOff = new BlurFilter(0,0,0);			pic.addChild(sp2);			sp2.filters = [blurFilterOn];			sp2.alpha = 0;			Tweener.addTween(sp1, {_filter:blurFilterOn,alpha:0, time:t, onComplete: removePic, onCompleteParams:[sp1]});			Tweener.addTween(sp2, {_filter:blurFilterOff, alpha:1, delay:t*0, time:t});		}		private function removePic(sp1)		{			pic.removeChild(sp1);		}		override protected function removeAdditionalEventHandlers()		{						connector.cleanUp();			if (assetLoader != null)				{				trace("Cleaning");				assetLoader.cleanUp();				trace("AssetLoader Clean");			}			textSprite.removeEventListener(MouseEvent.MOUSE_DOWN, startDragging);			textSprite.removeEventListener(MouseEvent.MOUSE_UP, stopDragging);			if (ff.hasEventListener(MouseEvent.CLICK)) ff.removeEventListener(MouseEvent.CLICK, forwardButtonClick);			if (rew.hasEventListener(MouseEvent.CLICK)) rew.removeEventListener(MouseEvent.CLICK, backButtonClick);			Tweener.removeAllTweens()		}		// Public Methods:		// Protected Methods:	}	}